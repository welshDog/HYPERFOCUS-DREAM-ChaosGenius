#!/usr/bin/env python3
"""
PROJECT ANALYZER, FIXER & UPGRADER
==================================
Lead Ultra AI Developer Tool

This script performs comprehensive project analysis, fixes issues,
and upgrades code to production standards.
"""

import os
import sys
import json
import subprocess
import re
from pathlib import Path
from typing import List, Dict, Any, Tuple
import logging
from datetime import datetime

class ProjectAnalyzer:
    """Ultra AI Developer - Project Analysis and Upgrade Tool"""
    
    def __init__(self, project_path: str = "."):
        self.project_path = Path(project_path).resolve()
        self.issues_found = []
        self.fixes_applied = []
        self.upgrades_made = []
        self.setup_logging()
        
    def setup_logging(self):
        """Initialize comprehensive logging system"""
        logging.basicConfig(
            level=logging.INFO,
            format='%(asctime)s - %(levelname)s - %(message)s',
            handlers=[
                logging.FileHandler('project_upgrade.log'),
                logging.StreamHandler(sys.stdout)
            ]
        )
        self.logger = logging.getLogger(__name__)
        
    def scan_project_structure(self) -> Dict[str, Any]:
        """Analyze complete project structure and file types"""
        structure = {
            'files': [],
            'directories': [],
            'file_types': {},
            'total_size': 0,
            'languages': set()
        }
        
        for root, dirs, files in os.walk(self.project_path):
            root_path = Path(root)
            
            # Skip hidden directories and common ignore patterns
            dirs[:] = [d for d in dirs if not d.startswith('.') and d not in 
                      {'node_modules', '__pycache__', 'venv', 'env', 'dist', 'build'}]
            
            structure['directories'].append(str(root_path.relative_to(self.project_path)))
            
            for file in files:
                if file.startswith('.'):
                    continue
                    
                file_path = root_path / file
                rel_path = file_path.relative_to(self.project_path)
                file_size = file_path.stat().st_size
                
                structure['files'].append({
                    'path': str(rel_path),
                    'size': file_size,
                    'extension': file_path.suffix,
                    'modified': datetime.fromtimestamp(file_path.stat().st_mtime)
                })
                
                structure['total_size'] += file_size
                
                # Track file types and languages
                ext = file_path.suffix.lower()
                structure['file_types'][ext] = structure['file_types'].get(ext, 0) + 1
                
                if ext in {'.py', '.js', '.ts', '.java', '.cpp', '.c', '.cs', '.go', '.rs', '.php'}:
                    structure['languages'].add(self.get_language_from_extension(ext))
        
        return structure
    
    def get_language_from_extension(self, ext: str) -> str:
        """Map file extensions to programming languages"""
        mapping = {
            '.py': 'Python',
            '.js': 'JavaScript',
            '.ts': 'TypeScript',
            '.java': 'Java',
            '.cpp': 'C++',
            '.c': 'C',
            '.cs': 'C#',
            '.go': 'Go',
            '.rs': 'Rust',
            '.php': 'PHP'
        }
        return mapping.get(ext, 'Unknown')
    
    def detect_project_type(self, structure: Dict[str, Any]) -> str:
        """Intelligently detect project type based on files and structure"""
        files = [f['path'] for f in structure['files']]
        
        # Check for specific configuration files
        if 'package.json' in files:
            return 'Node.js/JavaScript'
        elif 'requirements.txt' in files or 'setup.py' in files or 'pyproject.toml' in files:
            return 'Python'
        elif 'pom.xml' in files or 'build.gradle' in files:
            return 'Java'
        elif 'Cargo.toml' in files:
            return 'Rust'
        elif 'go.mod' in files:
            return 'Go'
        elif any('.csproj' in f for f in files):
            return 'C#/.NET'
        
        # Fallback to most common language
        if structure['languages']:
            return f"{list(structure['languages'])[0]} Project"
        
        return 'Mixed/Unknown'
    
    def analyze_code_quality(self) -> List[Dict[str, Any]]:
        """Comprehensive code quality analysis"""
        issues = []
        
        for root, _, files in os.walk(self.project_path):
            for file in files:
                file_path = Path(root) / file
                if file_path.suffix in {'.py', '.js', '.ts', '.java', '.cpp', '.c'}:
                    issues.extend(self.analyze_file(file_path))
        
        return issues
    
    def analyze_file(self, file_path: Path) -> List[Dict[str, Any]]:
        """Analyze individual file for issues"""
        issues = []
        
        try:
            with open(file_path, 'r', encoding='utf-8', errors='ignore') as f:
                content = f.read()
                lines = content.split('\n')
            
            # Common issue patterns
            patterns = {
                'TODO': r'(?i)#?\s*todo:?\s*(.+)',
                'FIXME': r'(?i)#?\s*fixme:?\s*(.+)',
                'XXX': r'(?i)#?\s*xxx:?\s*(.+)',
                'HACK': r'(?i)#?\s*hack:?\s*(.+)',
                'long_line': r'^.{120,}$',
                'trailing_whitespace': r'\s+$',
                'multiple_blank_lines': r'\n\s*\n\s*\n',
                'missing_docstring': r'^(def|class|function)\s+\w+.*?:\s*$'
            }
            
            for i, line in enumerate(lines, 1):
                for pattern_name, pattern in patterns.items():
                    if re.search(pattern, line):
                        issues.append({
                            'file': str(file_path.relative_to(self.project_path)),
                            'line': i,
                            'type': pattern_name,
                            'content': line.strip(),
                            'severity': self.get_issue_severity(pattern_name)
                        })
            
        except Exception as e:
            self.logger.warning(f"Could not analyze {file_path}: {e}")
        
        return issues
    
    def get_issue_severity(self, issue_type: str) -> str:
        """Categorize issue severity"""
        high = {'missing_docstring', 'FIXME', 'XXX'}
        medium = {'TODO', 'HACK', 'long_line'}
        low = {'trailing_whitespace', 'multiple_blank_lines'}
        
        if issue_type in high:
            return 'HIGH'
        elif issue_type in medium:
            return 'MEDIUM'
        return 'LOW'
    
    def create_project_files(self, project_type: str, structure: Dict[str, Any]):
        """Create essential project files"""
        
        # Create README.md
        self.create_readme(project_type, structure)
        
        # Create .gitignore
        self.create_gitignore(project_type)
        
        # Create project-specific config files
        if 'Python' in project_type:
            self.create_python_files()
        elif 'JavaScript' in project_type or 'Node.js' in project_type:
            self.create_nodejs_files()
    
    def format_file_types(self, file_types: Dict[str, int]) -> str:
        """Format file types dictionary into a readable string"""
        if not file_types:
            return "No files detected"
        
        formatted = []
        for ext, count in sorted(file_types.items(), key=lambda x: x[1], reverse=True):
            formatted.append(f"- **{ext or 'No extension'}**: {count} files")
        
        return '\n'.join(formatted)
    
    def create_gitignore(self, project_type: str):
            """Create appropriate .gitignore file"""
            gitignore_path = self.project_path / ".gitignore"
            if gitignore_path.exists():
                return
            
            gitignore_content = """# Byte-compiled / optimized / DLL files
    __pycache__/
    *.py[cod]
    *$py.class
    
    # Distribution / packaging
    .Python
    build/
    develop-eggs/
    dist/
    downloads/
    eggs/
    .eggs/
    lib/
    lib64/
    parts/
    sdist/
    var/
    wheels/
    *.egg-info/
    .installed.cfg
    *.egg
    
    # PyInstaller
    *.manifest
    *.spec
    
    # Unit test / coverage reports
    htmlcov/
    .tox/
    .coverage
    .coverage.*
    .cache
    nosetests.xml
    coverage.xml
    *.cover
    .hypothesis/
    .pytest_cache/
    
    # Environments
    .env
    .venv
    env/
    venv/
    ENV/
    env.bak/
    venv.bak/
    
    # IDE
    .vscode/
    .idea/
    *.swp
    *.swo
    *~
    
    # OS generated files
    .DS_Store
    .DS_Store?
    ._*
    .Spotlight-V100
    .Trashes
    ehthumbs.db
    Thumbs.db
    
    # Logs
    *.log
    """
            
            if 'JavaScript' in project_type or 'Node.js' in project_type:
                gitignore_content += """
    # Node.js
    node_modules/
    npm-debug.log*
    yarn-debug.log*
    yarn-error.log*
    """
            
            with open(gitignore_path, 'w') as f:
                f.write(gitignore_content)
                    self.fixes_applied.append("Created .gitignore")
        
        def create_nodejs_files(self):
            """Create Node.js specific configuration files"""
            # Create package.json if it doesn't exist
            package_json_path = self.project_path / "package.json"
            if not package_json_path.exists():
                package_content = {
                    "name": "nexus-project",
                    "version": "1.0.0",
                    "description": "Ultra AI Developer upgraded project",
                    "main": "index.js",
                    "scripts": {
                        "start": "node index.js",
                        "test": "echo \"Error: no test specified\" && exit 1"
                    },
                    "keywords": [],
                    "author": "",
                    "license": "ISC"
                }
                with open(package_json_path, 'w') as f:
                    json.dump(package_content, f, indent=2)
                self.fixes_applied.append("Created package.json")
    
    def create_python_files(self):
        """Create Python specific configuration files"""
        # Create requirements.txt if it doesn't exist
        requirements_path = self.project_path / "requirements.txt"
        if not requirements_path.exists():
            with open(requirements_path, 'w') as f:
                f.write("# Project dependencies\n")
            self.fixes_applied.append("Created requirements.txt")
        
        # Create setup.py if it doesn't exist
        setup_py_path = self.project_path / "setup.py"
        if not setup_py_path.exists():
            setup_content = '''from setuptools import setup, find_packages

setup(
    name="nexus-project",
    version="1.0.0",
    packages=find_packages(),
    install_requires=[],
    author="Ultra AI Developer",
    description="AI upgraded project"
)
'''
            with open(setup_py_path, 'w') as f:
                f.write(setup_content)
            self.fixes_applied.append("Created setup.py")

    def create_readme(self, project_type: str, structure: Dict[str, Any]):
        """Generate comprehensive README.md"""
        readme_content = f"""# 🚀 CODENAME: NEXUS
## {project_type} Project

### 📋 Project Overview
This project has been analyzed and upgraded by the Ultra AI Developer system.

### 🏗️ Project Structure
- **Total Files**: {len(structure['files'])}
- **Languages**: {', '.join(structure['languages']) if structure['languages'] else 'Mixed'}
- **Project Size**: {structure['total_size'] / 1024:.1f} KB

### 🛠️ File Types
{self.format_file_types(structure['file_types'])}

### 🚀 Getting Started
1. Clone the repository
2. Install dependencies (see below)
3. Run the project

### 📦 Dependencies
See requirements.txt or package.json for specific dependencies.

### 📄 License
This project is licensed under the MIT License.
"""
        
        readme_path = self.project_path / "README.md"
        with open(readme_path, 'w') as f:
            f.write(readme_content)
        self.fixes_applied.append("Created README.md")