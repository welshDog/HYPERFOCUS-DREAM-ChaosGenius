import datetime
import os
from pathlib import Path


def write_ultra_structure(src_folder=".", out_file="STRUCTURE_MAP.md", max_depth=3):
    """
    🚀 ULTRA MAP GENERATOR BRO!
    Creates an epic directory structure map with file info
    """
    with open(out_file, "w") as f:
        # Write header
        f.write("# 🗂️ ULTRA WORKSPACE STRUCTURE MAP\n")
        f.write(
            f"📅 Generated: {datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n"
        )
        f.write(f"📁 Root: {os.path.abspath(src_folder)}\n\n")
        f.write("```\n")

        # Track stats
        total_files = 0
        total_dirs = 0

        for root, dirs, files in os.walk(src_folder):
            # Calculate depth
            level = root.replace(src_folder, "").count(os.sep)

            # Skip if too deep
            if level >= max_depth:
                dirs[:] = []  # Don't recurse deeper
                continue

            # Format directory
            indent = "│   " * level
            if level == 0:
                f.write(f"🏠 {os.path.basename(root) or 'ROOT'}/\n")
            else:
                f.write(f"{indent}├── 📁 {os.path.basename(root)}/\n")

            total_dirs += 1

            # Format files
            sub_indent = "│   " * (level + 1)
            for i, file in enumerate(files[:10]):  # Limit to first 10 files per dir
                try:
                    file_path = os.path.join(root, file)
                    size = os.path.getsize(file_path)

                    # Get file icon based on extension
                    ext = Path(file).suffix.lower()
                    icon = {
                        ".py": "🐍",
                        ".js": "💛",
                        ".html": "🌐",
                        ".css": "🎨",
                        ".json": "📄",
                        ".md": "📝",
                        ".txt": "📄",
                        ".db": "🗃️",
                        ".sh": "⚡",
                        ".yaml": "⚙️",
                        ".yml": "⚙️",
                        ".env": "🔐",
                    }.get(ext, "📄")

                    # Format size
                    if size < 1024:
                        size_str = f"{size}B"
                    elif size < 1024 * 1024:
                        size_str = f"{size//1024}KB"
                    else:
                        size_str = f"{size//(1024*1024)}MB"

                    f.write(f"{sub_indent}├── {icon} {file} ({size_str})\n")
                    total_files += 1
                except:
                    f.write(f"{sub_indent}├── ❓ {file}\n")
                    total_files += 1

            # Show if there are more files
            if len(files) > 10:
                f.write(f"{sub_indent}└── ... and {len(files)-10} more files\n")

        f.write("```\n\n")
        f.write(f"## 📊 STATS\n")
        f.write(f"- 📁 Total Directories: {total_dirs}\n")
        f.write(f"- 📄 Total Files: {total_files}\n")
        f.write(f"- 🔍 Max Depth Scanned: {max_depth}\n")

    print(f"🎯 ULTRA MAP COMPLETE! Structure written to {out_file}")
    print(f"📈 Mapped {total_dirs} directories and {total_files} files")


if __name__ == "__main__":
    # Map current directory instead of non-existent folder
    write_ultra_structure(".", "ULTRA_STRUCTURE_MAP.md", max_depth=4)
