#!/usr/bin/env python3
"""
🚀 BROSKI CLANVERSE ULTRA - BLAST OFF SAFETY CHECKLIST
Ultra Magic Implementation - Real System Validation
"""
import asyncio
import json
import os
import sqlite3
import sys
import time
from datetime import datetime
from pathlib import Path

import requests
from dotenv import load_dotenv

# Add our AI modules to path
sys.path.append("/root/chaosgenius")
from ai_modules.broski.broski_core import BROskiCore
from ai_modules.broski.token_engine import BROskiTokenEngine

print("🧐 INITIALIZING ULTRA MAGIC BLAST OFF SEQUENCE...")
print("=" * 60)


## 🔐 1. SECRETS & ENV PROTECTION - REAL IMPLEMENTATION
def check_secrets_security():
    """🔐 Validate all critical secrets are properly loaded"""
    print("🔐 Checking secrets & environment security...")

    load_dotenv()

    critical_secrets = [
        "DISCORD_BOT_TOKEN",
        "OPENAI_API_KEY",
        "ETSY_API_KEY",
        "CLOUDFLARE_API_TOKEN",
    ]

    missing_secrets = []
    for secret in critical_secrets:
        if not os.getenv(secret):
            missing_secrets.append(secret)

    if missing_secrets:
        print(f"⚠️ MISSING SECRETS: {', '.join(missing_secrets)}")
        return False

    # Check .env file permissions (should not be world-readable)
    env_file = Path(".env")
    if env_file.exists():
        permissions = oct(env_file.stat().st_mode)[-3:]
        if permissions != "600":
            print(f"⚠️ .env file permissions too open: {permissions} " "(should be 600)")
            return False

    print("✅ All secrets secured and loaded properly!")
    return True


## 🧪 2. TEST COVERAGE - REAL IMPLEMENTATIONS
def test_token_system():
    """🪙 Test BROski$ token minting and transactions"""
    print("🧪 Testing BROski$ token system...")

    try:
        # Use the new bulletproof token engine
        from ai_modules.broski.token_engine import BROskiTokenEngine

        engine = BROskiTokenEngine()

        # Test wallet creation and token award with bulletproof IDs
        test_user = "test_blast_off_user"

        # Test balance check
        balance = engine.get_balance(test_user)
        print(f"✅ Wallet balance: {balance} BROski$")

        # Test token award with new unique ID system
        award_result = engine.award_tokens(test_user, 25.0, "Blast off test award")
        if award_result["status"] == "success":
            print(f"✅ Token award successful: +25 BROski$")
            new_balance = engine.get_balance(test_user)
            print(f"✅ New balance: {new_balance} BROski$")
        else:
            print(f"❌ Token award failed: {award_result['message']}")
            return False

        # Test transfer with bulletproof transaction IDs
        if balance >= 10:
            transfer_result = engine.transfer_tokens(
                test_user, "crew_member_1", 10.0, "Test transfer"
            )
            if transfer_result["status"] == "success":
                print("✅ Token transfer successful")
            else:
                print(f"⚠️ Transfer issue: {transfer_result['message']}")

        # Test leaderboard
        leaderboard = engine.get_leaderboard(3)
        print(f"✅ Leaderboard: {len(leaderboard)} entries")

        print("✅ 🪙 Token System: ALL TESTS PASSED!")
        return True

    except Exception as e:
        print(f"❌ Token system error: {e}")
        return False


def test_broski_ai():
    """🧠 Test BROski AI core functionality"""
    print("🧪 Testing BROski AI intelligence...")

    try:
        # Use the new emergency AI specialist for bulletproof testing
        from emergency_ai_specialist import emergency_ai_specialist

        # Test system status
        status = emergency_ai_specialist.get_system_status()
        if status["status"] != "AI_SPECIALIST_OPERATIONAL":
            print(f"❌ AI status check failed: {status}")
            return False

        # Test AI response generation with bulletproof sync method
        test_response = emergency_ai_specialist.process_user_interaction(
            "test_user", "I'm feeling overwhelmed and stressed about deadlines"
        )

        if not test_response.message or len(test_response.message) < 10:
            print("❌ AI response too short or empty")
            return False

        # Test mood detection accuracy
        if not test_response.mood_detected:
            print("❌ Mood detection failed")
            return False

        # Verify the response is appropriate for stress
        if test_response.mood_detected == "stressed":
            print("✅ Mood detection accurate: stress detected")
        else:
            print(
                f"⚠️ Mood detection: {test_response.mood_detected} (expected: stressed)"
            )

        print(
            f"✅ BROski AI operational - Intelligence: {status['system_intelligence']}%"
        )
        print(f"✅ Response quality: {len(test_response.message)} chars")
        print(f"✅ Processing time: {test_response.processing_time_ms}ms")
        return True

    except Exception as e:
        print(f"❌ BROski AI error: {e}")
        return False


def test_database_connections():
    """🗄️ Test all database connections"""
    print("🧪 Testing database connections...")

    databases = ["chaosgenius.db", "broski_tokens.db", "broski_learning.db"]

    for db_name in databases:
        try:
            conn = sqlite3.connect(db_name)
            cursor = conn.cursor()
            cursor.execute("SELECT 1")
            result = cursor.fetchone()
            conn.close()

            if not result:
                print(f"❌ Database {db_name} connection failed")
                return False

        except Exception as e:
            print(f"❌ Database {db_name} error: {e}")
            return False

    print("✅ All databases connected and responsive!")
    return True


def test_api_endpoints():
    """🌐 Test Flask API endpoints"""
    print("🧪 Testing API endpoints...")

    try:
        # Test if dashboard API is running on port 5000
        response = requests.get("http://localhost:5000/api/status", timeout=3)
        if response.status_code != 200:
            print("⚠️ Dashboard API not responding on port 5000")
            return False

        # Test health endpoint on port 5000
        response = requests.get("http://localhost:5000/api/health", timeout=3)
        if response.status_code != 200:
            print("⚠️ Health endpoint not responding on port 5000")
            return False

        print("✅ All API endpoints responding on port 5000!")
        return True

    except requests.exceptions.RequestException:
        print("⚠️ API server not running - will start during launch")
        return True  # Not critical for blast off


def test_discord_bot():
    """🤖 Verify Discord bot configuration"""
    print("🧪 Testing Discord bot configuration...")

    try:
        # Check if bot token is valid format
        token = os.getenv("DISCORD_BOT_TOKEN")
        if not token or len(token) < 50:
            print("❌ Invalid Discord bot token")
            return False

        # Check bot script exists and is valid Python
        bot_file = Path("chaosgenius_discord_bot.py")
        if not bot_file.exists():
            print("❌ Discord bot file missing")
            return False

        # Basic syntax check - look for modern slash commands
        with open(bot_file, "r", encoding="utf-8") as f:
            content = f.read()
            # Check for modern slash commands instead of old @bot.command
            if "@bot.tree.command" not in content and "@app_commands" not in content:
                print("❌ Discord bot commands not found")
                return False

        print("✅ Discord bot ready for deployment!")
        return True

    except Exception as e:
        print(f"❌ Discord bot check error: {e}")
        return False


def test_wallet_security():
    """🔐 Test wallet encryption and backup systems"""
    print("🧪 Testing BROski$ wallet security...")

    try:
        # Check wallet file exists and is properly formatted
        wallet_file = Path("broski_wallets_SECURE.json")
        if wallet_file.exists():
            with open(wallet_file, "r", encoding="utf-8") as f:
                wallets = json.load(f)
                if not isinstance(wallets, dict):
                    print("❌ Wallet file corrupted")
                    return False

        # Check encryption key exists
        key_file = Path("broski_encryption.key")
        if not key_file.exists():
            print("⚠️ Encryption key missing - will generate during launch")

        # Check token database
        token_db = Path("broski_tokens.db")
        if token_db.exists():
            conn = sqlite3.connect("broski_tokens.db")
            cursor = conn.cursor()
            cursor.execute("SELECT COUNT(*) FROM transactions")
            count = cursor.fetchone()[0]
            conn.close()
            print(f"📊 {count} transactions in token database")

        print("✅ Wallet security systems operational!")
        return True

    except Exception as e:
        print(f"❌ Wallet security error: {e}")
        return False


def test_dashboard_files():
    """💻 Check web dashboard files and assets"""
    print("🧪 Testing web dashboard components...")

    critical_files = ["dashboard.html", "dashboard_api.py", "app.py"]

    for file_name in critical_files:
        file_path = Path(file_name)
        if not file_path.exists():
            print(f"❌ Missing critical file: {file_name}")
            return False

    # Check HTML file has required elements
    with open("dashboard.html", "r", encoding="utf-8") as f:
        html_content = f.read()
        if "BROski" not in html_content:
            print("⚠️ Dashboard may not be properly branded")

    print("✅ Dashboard files validated!")
    return True


def test_domain_config():
    """🌐 Test domain and SSL configuration"""
    print("🧪 Testing domain configuration...")

    try:
        # Check if we have domain configuration
        config_files = ["cloudflare_config.json", "domain_config.json"]
        domain_configured = any(Path(f).exists() for f in config_files)

        if not domain_configured:
            print("⚠️ Domain not configured - running locally")
            return True

        # Test local SSL cert if exists
        ssl_files = ["server.crt", "server.key"]
        ssl_ready = all(Path(f).exists() for f in ssl_files)

        if ssl_ready:
            print("✅ SSL certificates found!")
        else:
            print("⚠️ SSL will be handled by Cloudflare")

        print("✅ Domain configuration ready!")
        return True

    except Exception as e:
        print(f"❌ Domain config error: {e}")
        return False


def test_performance_metrics():
    """⚡ Test system performance and responsiveness"""
    print("🧪 Testing system performance...")

    try:
        # Test file system performance
        start_time = time.time()
        test_file = Path("performance_test.tmp")
        with open(test_file, "w", encoding="utf-8") as f:
            f.write("performance test" * 1000)
        test_file.unlink()
        file_io_time = time.time() - start_time

        if file_io_time > 1.0:
            print(f"⚠️ Slow file I/O: {file_io_time:.2f}s")
            return False

        # Test database query performance
        start_time = time.time()
        conn = sqlite3.connect("chaosgenius.db")
        cursor = conn.cursor()
        cursor.execute("SELECT 1")
        cursor.fetchone()
        conn.close()
        db_time = time.time() - start_time

        if db_time > 0.5:
            print(f"⚠️ Slow database: {db_time:.2f}s")
            return False

        print(
            f"✅ Performance optimal! File I/O: {file_io_time:.3f}s, "
            f"DB: {db_time:.3f}s"
        )
        return True

    except Exception as e:
        print(f"❌ Performance test error: {e}")
        return False


def setup_monitoring():
    """🛡️ Setup error monitoring and alerts"""
    print("🛡️ Setting up monitoring systems...")

    try:
        # Create logs directory
        logs_dir = Path("logs")
        logs_dir.mkdir(exist_ok=True)

        # Create monitoring subdirectories
        (logs_dir / "discord_bot").mkdir(exist_ok=True)
        (logs_dir / "api").mkdir(exist_ok=True)
        (logs_dir / "tokens").mkdir(exist_ok=True)

        # Create health check file
        health_file = logs_dir / "system_health.json"
        health_data = {
            "last_check": datetime.now().isoformat(),
            "status": "operational",
            "checks_passed": 0,
            "total_checks": 0,
        }

        with open(health_file, "w", encoding="utf-8") as f:
            json.dump(health_data, f, indent=2)

        print("✅ Monitoring systems configured!")
        return True

    except Exception as e:
        print(f"❌ Monitoring setup error: {e}")
        return False


## 🚀 MASTER BLAST OFF SEQUENCE
def execute_blast_off_checklist():
    """🚀 Execute complete pre-launch validation"""
    print("\n" + "🚀" * 20)
    print("BROSKI CLANVERSE ULTRA - BLAST OFF SEQUENCE INITIATED")
    print("🚀" * 20 + "\n")

    checks = [
        ("🔐 Secrets Security", check_secrets_security),
        ("🪙 Token System", test_token_system),
        ("🧠 BROski AI", test_broski_ai),
        ("🗄️ Databases", test_database_connections),
        ("🌐 API Endpoints", test_api_endpoints),
        ("🤖 Discord Bot", test_discord_bot),
        ("💰 Wallet Security", test_wallet_security),
        ("💻 Dashboard", test_dashboard_files),
        ("🌐 Domain Config", test_domain_config),
        ("⚡ Performance", test_performance_metrics),
        ("🛡️ Monitoring", setup_monitoring),
    ]

    passed_checks = 0
    total_checks = len(checks)
    failed_checks = []

    for check_name, check_function in checks:
        print(f"\n{'='*60}")
        print(f"Running: {check_name}")
        print("=" * 60)

        try:
            result = check_function()
            if result:
                passed_checks += 1
                print(f"✅ {check_name}: PASSED")
            else:
                failed_checks.append(check_name)
                print(f"❌ {check_name}: FAILED")
        except Exception as e:
            failed_checks.append(check_name)
            print(f"💥 {check_name}: CRASHED - {e}")

    # Final blast off decision
    print("\n" + "🎯" * 20)
    print("BLAST OFF CHECKLIST RESULTS")
    print("🎯" * 20)
    print(f"✅ Passed: {passed_checks}/{total_checks}")
    print(f"❌ Failed: {len(failed_checks)}")

    if failed_checks:
        print(f"🚨 Failed Checks: {', '.join(failed_checks)}")

    success_rate = (passed_checks / total_checks) * 100

    if success_rate >= 90:
        print(f"\n🚀 BLAST OFF APPROVED! Success Rate: {success_rate:.1f}%")
        print("🌟 BROski ClanVerse Ultra is GO FOR LAUNCH! 🌟")
        launch_approved = True
    elif success_rate >= 75:
        print(f"\n⚠️ CONDITIONAL LAUNCH: Success Rate: {success_rate:.1f}%")
        print("🛠️ Some issues detected but system is functional")
        launch_approved = True
    else:
        print(f"\n🚨 LAUNCH ABORTED! Success Rate: {success_rate:.1f}%")
        print("🔧 Critical issues must be resolved before launch")
        launch_approved = False

    return launch_approved


if __name__ == "__main__":
    print("💪 ULTRA MAGIC ACTIVATED - FULL SYSTEM VALIDATION!")
    print("👊 Checking every component of the BROski empire...")

    launch_approved = execute_blast_off_checklist()

    if launch_approved:
        print("\n" + "🎉" * 30)
        print("🚀 BROSKI CLANVERSE ULTRA: CLEARED FOR TAKEOFF! 🚀")
        print("☢️ All systems nominal - ready to dominate! ☢️")
        print("🎉" * 30)
    else:
        print("\n" + "🔧" * 30)
        print("🛠️ SYSTEMS REQUIRE ATTENTION BEFORE LAUNCH")
        print("⚡ Fix issues and run blast off checks again!")
        print("🔧" * 30)
