import os
import shutil
from pathlib import Path
import json
from datetime import datetime

class ProductionFileOrganizer:
    """Production-ready file organizer with smart targeting and safety features"""
    
    def __init__(self):
        self.project_root = Path(__file__).parent
        self.organized_count = 0
        self.skipped_count = 0
        self.errors = []
        
        # üéØ BEST FOLDERS TO ORGANIZE (based on your project structure)
        self.target_folders = [
            # Downloads folder (most beneficial!)
            Path.home() / "Downloads",
            # Desktop (excluding your project folder)
            Path.home() / "Desktop",
            # Documents folder
            Path.home() / "Documents",
            # Your project's generated_docs (already somewhat organized)
            self.project_root / "generated_docs",
            # Your production assets (could be better organized)
            self.project_root / "production_assets"
        ]
        
        # üîñ Enhanced category mapping
        self.folder_map = {
            "üì∑ Images": [".jpg", ".jpeg", ".png", ".gif", ".bmp", ".svg", ".webp", ".ico", ".tiff"],
            "üìÑ Documents": [".pdf", ".docx", ".doc", ".txt", ".xlsx", ".pptx", ".csv", ".rtf"],
            "üé¨ Videos": [".mp4", ".mkv", ".mov", ".avi", ".wmv", ".flv", ".webm"],
            "üéµ Audio": [".mp3", ".wav", ".ogg", ".aac", ".flac", ".m4a"],
            "üì¶ Archives": [".zip", ".rar", ".7z", ".tar", ".gz", ".bz2"],
            "üíª Code": [".py", ".js", ".html", ".css", ".json", ".cpp", ".c", ".java", ".php"],
            "üé® 3D Models": [".stl", ".obj", ".fbx", ".blend", ".3mf"],
            "‚öôÔ∏è Executables": [".exe", ".msi", ".bat", ".sh", ".app", ".deb"],
            "üé≠ Designs": [".psd", ".ai", ".fig", ".xd", ".sketch"],
            "üìù Markdown": [".md", ".mdx"],
            "üìä Data": [".xml", ".yaml", ".yml", ".toml", ".ini"],
            "üìà Spreadsheets": [".xls", ".xlsx", ".csv", ".ods"],
            "üîß Config": [".conf", ".config", ".env", ".gitignore"],
            "üåê Web": [".html", ".htm", ".css", ".js", ".php"],
            "üì± Mobile": [".apk", ".ipa", ".xcodeproj"],
            "üìö Ebooks": [".epub", ".mobi", ".azw", ".azw3"],
            "üî§ Fonts": [".ttf", ".otf", ".woff", ".woff2"],
            "‚ùì Others": []  # Fallback
        }
        
        # Create reverse mapping
        self.ext_to_category = {}
        for category, ext_list in self.folder_map.items():
            for ext in ext_list:
                self.ext_to_category[ext] = category
        
        # üõ°Ô∏è SAFETY: Files to NEVER move
        self.protected_files = {
            'README.md', 'requirements.txt', '.gitignore', 'package.json',
            'Cargo.toml', 'composer.json', 'pom.xml', 'build.gradle',
            'index.html', 'main.py', 'app.py', 'server.py', 'dashboard_api.py',
            'auto_doc_generator.py', 'production_manager.py', 'graceful_shutdown_example.py',
            'dashboard.html', 'chaosgenius.db', 'structure.txt', 'ChaosGenius.code-workspace'
        }
        
        # üõ°Ô∏è SAFETY: Folders to NEVER organize
        self.protected_folders = {
            'venv', '.git', '__pycache__', 'node_modules', '.vscode',
            'generated_docs', 'production_assets', 'final_exports', 'The Zone', 'Ultra IPFS'
        }

        # üéØ PROJECT-SPECIFIC CATEGORIES for HYPERFOCUS DREAM
        self.project_folder_map = {
            "üìù Scripts & Prompts": ["AI Squad", "ANALYZE + SETUP BOOSTER", "PROJECT SETUP PROMPT", 
                                   "Prompt Cheat for AI Code Analysis & Fixing", "Prompts for Project Mastery",
                                   "ULTRA FIXER PROMPT", "administrator powers", "ai builder"],
            "üé¨ Marketing Content": ["ChaosGenius_Pitch_Deck.md", "ChaosGenius_Video_Pitch_Script.md",
                                   "ChaosGenius_Visual_Assets.md", "ElevenLabs_Audio_Pitch_Script.md",
                                   "Synthesia_Video_Pitch_Script.md", "Complete_Video_Marketing_Guide.md",
                                   "Video_Audio_Production_Walkthrough.md"],
            "üöÄ Setup & Deploy": ["setup1", "setup2", "Ultra Mode upgades", "Use Visual Studio Code"],
            "üìä Business Data": ["business_blueprint_20250524_000025.json", "business_blueprint_20250524_021526.json",
                               "file_organization_log_20250524_023855.json"],
            "üõ†Ô∏è Tools & Utilities": ["AI Business Creator Squad (God-Tier Mode)", "Auto File Organizer Script",
                                    "Project Analyzer, Fixer & Upgrader", "Documentation Suite",
                                    "Launch Tracker (Markdown Version)"],
            "üéØ Welcome & Onboarding": ["Welcome to Hyperfocus Zone", "Welcome to Hyperfocus Zone1"]
        }

    def is_safe_to_organize(self, file_path: Path) -> bool:
        """Check if it's safe to organize this file"""
        # Don't move protected files
        if file_path.name in self.protected_files:
            return False
            
        # Don't move files that start with dot (hidden/system files)
        if file_path.name.startswith('.'):
            return False
            
        # Don't move files from protected folders
        if any(protected in str(file_path) for protected in self.protected_folders):
            return False
            
        # Don't move files that are already in organized folders
        if file_path.parent.name in [cat.split(' ', 1)[1] if ' ' in cat else cat 
                                   for cat in self.folder_map.keys()]:
            return False
            
        return True

    def organize_folder(self, folder_path: Path, dry_run: bool = False) -> dict:
        """Organize a specific folder"""
        if not folder_path.exists():
            return {"error": f"Folder {folder_path} does not exist"}
            
        results = {
            "folder": str(folder_path),
            "organized": 0,
            "skipped": 0,
            "created_categories": [],
            "errors": []
        }
        
        print(f"\nüîç {'ANALYZING' if dry_run else 'ORGANIZING'}: {folder_path}")
        
        files_to_organize = []
        
        # Scan for files to organize
        try:
            for file_path in folder_path.iterdir():
                if file_path.is_file() and self.is_safe_to_organize(file_path):
                    ext = file_path.suffix.lower()
                    category = self.ext_to_category.get(ext, "‚ùì Others")
                    files_to_organize.append((file_path, category))
        except PermissionError:
            results["errors"].append(f"Permission denied: {folder_path}")
            return results
            
        if not files_to_organize:
            print("‚ú® Folder is already organized or no files to organize!")
            return results
            
        # Show preview
        print(f"üìã Found {len(files_to_organize)} files to organize:")
        category_counts = {}
        for _, category in files_to_organize:
            category_counts[category] = category_counts.get(category, 0) + 1
            
        for category, count in category_counts.items():
            print(f"   {category}: {count} files")
            
        if dry_run:
            print("   (DRY RUN - no files will be moved)")
            return results
            
        # Actually organize files
        for file_path, category in files_to_organize:
            try:
                # Create category folder
                category_name = category.split(' ', 1)[1] if ' ' in category else category
                target_folder = folder_path / category_name
                target_folder.mkdir(exist_ok=True)
                
                if category_name not in results["created_categories"]:
                    results["created_categories"].append(category_name)
                
                # Move file
                target_path = target_folder / file_path.name
                
                # Handle filename conflicts
                counter = 1
                original_target = target_path
                while target_path.exists():
                    stem = original_target.stem
                    suffix = original_target.suffix
                    target_path = original_target.parent / f"{stem}_{counter}{suffix}"
                    counter += 1
                
                shutil.move(str(file_path), str(target_path))
                print(f"‚úÖ Moved: {file_path.name} ‚Üí {category_name}/")
                results["organized"] += 1
                self.organized_count += 1
                
            except Exception as e:
                error_msg = f"Failed to move {file_path.name}: {str(e)}"
                results["errors"].append(error_msg)
                print(f"‚ùå {error_msg}")
                
        return results

    def create_backup_log(self, results: list):
        """Create a backup log of all changes"""
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        log_file = self.project_root / f"file_organization_log_{timestamp}.json"
        
        log_data = {
            "timestamp": timestamp,
            "total_organized": self.organized_count,
            "total_skipped": self.skipped_count,
            "folders_processed": len([r for r in results if not r.get("error")]),
            "results": results
        }
        
        with open(log_file, 'w', encoding='utf-8') as f:
            json.dump(log_data, f, indent=2, ensure_ascii=False)
            
        print(f"\nüìä Organization log saved: {log_file}")
        return log_file

    def run_smart_organization(self, dry_run: bool = True, custom_folders: list = None):
        """Run smart organization on best target folders"""
        print("üß† PRODUCTION FILE ORGANIZER - SMART MODE")
        print("=" * 50)
        
        # Use custom folders if provided, otherwise use smart defaults
        folders_to_process = custom_folders or []
        
        # Add smart default folders that exist
        if not custom_folders:
            for folder in self.target_folders:
                if folder.exists() and folder.name != "HYPERFOCUS DREAM build idea":
                    folders_to_process.append(folder)
        
        if not folders_to_process:
            print("‚ùå No suitable folders found to organize!")
            return
            
        print(f"üéØ Target folders ({len(folders_to_process)}):")
        for folder in folders_to_process:
            size_info = ""
            try:
                file_count = len([f for f in folder.iterdir() if f.is_file()])
                size_info = f" ({file_count} files)"
            except:
                size_info = " (access limited)"
            print(f"   üìÅ {folder}{size_info}")
            
        if dry_run:
            print(f"\nüß™ DRY RUN MODE - Preview only, no files will be moved")
        else:
            print(f"\nüöÄ PRODUCTION MODE - Files will be organized!")
            response = input("Continue? (y/N): ")
            if response.lower() != 'y':
                print("Operation cancelled.")
                return
                
        print("\n" + "="*50)
        
        all_results = []
        
        # Process each folder
        for folder in folders_to_process:
            try:
                result = self.organize_folder(folder, dry_run)
                all_results.append(result)
            except Exception as e:
                error_result = {"folder": str(folder), "error": str(e)}
                all_results.append(error_result)
                print(f"‚ùå Error processing {folder}: {e}")
                
        # Summary
        print(f"\nüéâ ORGANIZATION {'PREVIEW' if dry_run else 'COMPLETE'}!")
        print("=" * 50)
        
        successful = [r for r in all_results if not r.get("error")]
        total_organized = sum(r.get("organized", 0) for r in successful)
        total_categories = len(set(cat for r in successful for cat in r.get("created_categories", [])))
        
        print(f"üìä Summary:")
        print(f"   üìÅ Folders processed: {len(successful)}")
        print(f"   üìÑ Files organized: {total_organized}")
        print(f"   üóÇÔ∏è Categories created: {total_categories}")
        
        if not dry_run and total_organized > 0:
            self.create_backup_log(all_results)
            
        # Show next steps
        if dry_run and total_organized > 0:
            print(f"\nüöÄ To actually organize files, run:")
            print(f"   organizer.run_smart_organization(dry_run=False)")

    def organize_project_folder(self, dry_run: bool = True) -> dict:
        """Organize the HYPERFOCUS DREAM build idea project folder using project-specific categories"""
        
        results = {
            "folder": str(self.project_root),
            "organized": 0,
            "skipped": 0,
            "created_categories": [],
            "errors": []
        }
        
        print(f"\nüéØ {'ANALYZING' if dry_run else 'ORGANIZING'} PROJECT FOLDER: {self.project_root.name}")
        print("=" * 60)
        
        # Create reverse mapping for project files
        file_to_category = {}
        for category, files in self.project_folder_map.items():
            for file_name in files:
                file_to_category[file_name] = category
        
        # Find files that need organizing
        files_to_organize = []
        
        try:
            for item_path in self.project_root.iterdir():
                if item_path.is_file() or item_path.is_dir():
                    # Skip protected items
                    if (item_path.name in self.protected_files or 
                        item_path.name in self.protected_folders or
                        item_path.name.startswith('.')):
                        continue
                    
                    # Check if it needs organizing
                    if item_path.name in file_to_category:
                        category = file_to_category[item_path.name]
                        files_to_organize.append((item_path, category))
                        
        except PermissionError:
            results["errors"].append(f"Permission denied: {self.project_root}")
            return results
        
        if not files_to_organize:
            print("‚ú® Project folder is already well organized!")
            return results
        
        # Show preview
        print(f"üìã Found {len(files_to_organize)} items to organize:")
        category_counts = {}
        for _, category in files_to_organize:
            category_counts[category] = category_counts.get(category, 0) + 1
            
        for category, count in sorted(category_counts.items()):
            print(f"   {category}: {count} items")
            
        if dry_run:
            print("\n   üß™ DRY RUN - Items that would be organized:")
            for item_path, category in files_to_organize:
                category_name = category.split(' ', 1)[1] if ' ' in category else category
                print(f"      {item_path.name} ‚Üí {category_name}/")
            return results
        
        print(f"\nüöÄ Organizing {len(files_to_organize)} items...")
        
        # Actually organize items
        for item_path, category in files_to_organize:
            try:
                # Create category folder
                category_name = category.split(' ', 1)[1] if ' ' in category else category
                target_folder = self.project_root / category_name
                target_folder.mkdir(exist_ok=True)
                
                if category_name not in results["created_categories"]:
                    results["created_categories"].append(category_name)
                
                # Move item
                target_path = target_folder / item_path.name
                
                # Handle naming conflicts
                counter = 1
                original_target = target_path
                while target_path.exists():
                    if item_path.is_dir():
                        target_path = original_target.parent / f"{original_target.name}_{counter}"
                    else:
                        stem = original_target.stem
                        suffix = original_target.suffix
                        target_path = original_target.parent / f"{stem}_{counter}{suffix}"
                    counter += 1
                
                shutil.move(str(item_path), str(target_path))
                item_type = "üìÅ" if item_path.is_dir() else "üìÑ"
                print(f"‚úÖ Moved: {item_type} {item_path.name} ‚Üí {category_name}/")
                results["organized"] += 1
                self.organized_count += 1
                
            except Exception as e:
                error_msg = f"Failed to move {item_path.name}: {str(e)}"
                results["errors"].append(error_msg)
                print(f"‚ùå {error_msg}")
                
        return results

# üöÄ USAGE EXAMPLES
def main():
    organizer = ProductionFileOrganizer()
    
    print("üéØ SMART FOLDER ORGANIZER")
    print("Choose an option:")
    print("1. üß™ Preview organization (recommended first)")
    print("2. üöÄ Organize Downloads folder")
    print("3. üìä Organize project production assets")
    print("4. üéØ Organize HYPERFOCUS DREAM project folder")
    print("5. üåê Custom folder organization")
    print("6. üéØ Smart auto-organize (all safe folders)")
    
    choice = input("\nEnter choice (1-6): ").strip()
    
    if choice == "1":
        # Safe preview mode
        organizer.run_smart_organization(dry_run=True)
        
    elif choice == "2":
        # Organize Downloads folder specifically
        downloads = Path.home() / "Downloads"
        if downloads.exists():
            organizer.run_smart_organization(dry_run=False, custom_folders=[downloads])
        else:
            print("‚ùå Downloads folder not found!")
            
    elif choice == "3":
        # Organize project assets
        assets = organizer.project_root / "production_assets"
        organizer.run_smart_organization(dry_run=False, custom_folders=[assets])
        
    elif choice == "4":
        # Organize HYPERFOCUS DREAM project folder
        print("üéØ HYPERFOCUS DREAM PROJECT ORGANIZER")
        print("This will organize your project files into logical categories.")
        print("Preview first? (recommended)")
        preview = input("Preview first? (Y/n): ").strip().lower()
        
        if preview != 'n':
            print("\nüß™ PREVIEW MODE:")
            organizer.organize_project_folder(dry_run=True)
            
            if input("\nProceed with organization? (y/N): ").strip().lower() == 'y':
                result = organizer.organize_project_folder(dry_run=False)
                if result["organized"] > 0:
                    organizer.create_backup_log([result])
        else:
            result = organizer.organize_project_folder(dry_run=False)
            if result["organized"] > 0:
                organizer.create_backup_log([result])
        
    elif choice == "5":
        # Custom folder
        folder_path = input("Enter folder path: ").strip()
        custom_folder = Path(folder_path)
        if custom_folder.exists():
            organizer.run_smart_organization(dry_run=False, custom_folders=[custom_folder])
        else:
            print(f"‚ùå Folder {folder_path} not found!")
            
    elif choice == "6":
        # Smart auto-organize
        organizer.run_smart_organization(dry_run=False)
        
    else:
        print("Invalid choice. Running preview mode...")
        organizer.run_smart_organization(dry_run=True)

if __name__ == "__main__":
    main()