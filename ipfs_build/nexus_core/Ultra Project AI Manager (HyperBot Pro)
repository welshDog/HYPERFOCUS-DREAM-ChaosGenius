"""
Ultra Project AI Manager (HyperBot Pro)
Personal AI Project Manager + Dev Lead + Cheerleader

Features:
- Project & goal tracking
- Task prioritization & execution planning
- Personal assistant with context awareness
- Integration with development workflow
"""

import json
import datetime
from typing import Dict, List, Any
from dataclasses import dataclass, asdict
from pathlib import Path

@dataclass
class Project:
    name: str
    description: str
    status: str  # "active", "paused", "completed", "archived"
    priority: int  # 1-5, 1 being highest
    goals: List[str]
    tasks: List[Dict]
    tools: List[str]
    created_date: str
    last_updated: str

@dataclass
class Task:
    id: str
    title: str
    description: str
    status: str  # "todo", "in_progress", "completed", "blocked"
    priority: int
    project_id: str
    estimated_hours: float
    actual_hours: float
    due_date: str
    tags: List[str]

class HyperBotPro:
    def __init__(self, data_file: str = "hyperbot_data.json"):
        self.data_file = Path(data_file)
        self.projects: Dict[str, Project] = {}
        self.tasks: Dict[str, Task] = {}
        self.load_data()
    
    def load_data(self):
        """Load existing project and task data"""
        if self.data_file.exists():
            with open(self.data_file, 'r') as f:
                data = json.load(f)
                self.projects = {k: Project(**v) for k, v in data.get('projects', {}).items()}
                self.tasks = {k: Task(**v) for k, v in data.get('tasks', {}).items()}
    
    def save_data(self):
        """Save current state to file"""
        data = {
            'projects': {k: asdict(v) for k, v in self.projects.items()},
            'tasks': {k: asdict(v) for k, v in self.tasks.items()}
        }
        with open(self.data_file, 'w') as f:
            json.dump(data, f, indent=2)
    
    def create_project(self, name: str, description: str, priority: int = 3) -> str:
        """Create a new project"""
        project_id = f"proj_{len(self.projects) + 1}"
        project = Project(
            name=name,
            description=description,
            status="active",
            priority=priority,
            goals=[],
            tasks=[],
            tools=[],
            created_date=datetime.datetime.now().isoformat(),
            last_updated=datetime.datetime.now().isoformat()
        )
        self.projects[project_id] = project
        self.save_data()
        return project_id
    
    def add_task(self, project_id: str, title: str, description: str, 
                 priority: int = 3, estimated_hours: float = 1.0) -> str:
        """Add a new task to a project"""
        task_id = f"task_{len(self.tasks) + 1}"
        task = Task(
            id=task_id,
            title=title,
            description=description,
            status="todo",
            priority=priority,
            project_id=project_id,
            estimated_hours=estimated_hours,
            actual_hours=0.0,
            due_date="",
            tags=[]
        )
        self.tasks[task_id] = task
        if project_id in self.projects:
            self.projects[project_id].tasks.append(task_id)
            self.projects[project_id].last_updated = datetime.datetime.now().isoformat()
        self.save_data()
        return task_id
    
    def get_priority_tasks(self, limit: int = 5) -> List[Task]:
        """Get highest priority tasks across all projects"""
        active_tasks = [t for t in self.tasks.values() if t.status in ["todo", "in_progress"]]
        return sorted(active_tasks, key=lambda x: (x.priority, x.project_id))[:limit]
    
    def update_task_status(self, task_id: str, status: str, hours_worked: float = 0):
        """Update task status and log time"""
        if task_id in self.tasks:
            self.tasks[task_id].status = status
            self.tasks[task_id].actual_hours += hours_worked
            self.save_data()
    
    def get_project_stats(self, project_id: str) -> Dict[str, Any]:
        """Get project statistics and progress"""
        if project_id not in self.projects:
            return {}
        
        project = self.projects[project_id]
        project_tasks = [self.tasks[tid] for tid in project.tasks if tid in self.tasks]
        
        total_tasks = len(project_tasks)
        completed_tasks = len([t for t in project_tasks if t.status == "completed"])
        in_progress = len([t for t in project_tasks if t.status == "in_progress"])
        blocked_tasks = len([t for t in project_tasks if t.status == "blocked"])
        
        return {
            "project_name": project.name,
            "status": project.status,
            "priority": project.priority,
            "progress": f"{completed_tasks}/{total_tasks} tasks completed",
            "completion_rate": round((completed_tasks / total_tasks * 100) if total_tasks > 0 else 0, 1),
            "active_tasks": in_progress,
            "blocked_tasks": blocked_tasks,
            "total_estimated_hours": sum(t.estimated_hours for t in project_tasks),
            "total_actual_hours": sum(t.actual_hours for t in project_tasks)
        }
    
    def daily_standup(self) -> str:
        """Generate daily standup report"""
        priority_tasks = self.get_priority_tasks(3)
        active_projects = [p for p in self.projects.values() if p.status == "active"]
        
        report = "ðŸš€ DAILY HYPERFOCUS STANDUP ðŸš€\n\n"
        report += f"ðŸ“Š Active Projects: {len(active_projects)}\n"
        report += f"âš¡ Priority Tasks Today:\n"
        
        for i, task in enumerate(priority_tasks, 1):
            project_name = self.projects.get(task.project_id, Project("Unknown", "", "", 0, [], [], [], "", "")).name
            report += f"  {i}. [{project_name}] {task.title} (Priority: {task.priority})\n"
        
        report += f"\nðŸ’ª You've got this! Let's crush these tasks! ðŸ’ª"
        return report
    
    def suggest_next_action(self) -> str:
        """AI-powered suggestion for next action"""
        priority_tasks = self.get_priority_tasks(1)
        if not priority_tasks:
            return "ðŸŽ‰ All caught up! Time to plan your next big move or take a well-deserved break!"
        
        task = priority_tasks[0]
        project_name = self.projects.get(task.project_id, Project("Unknown", "", "", 0, [], [], [], "", "")).name
        
        suggestions = [
            f"ðŸŽ¯ Focus time! Tackle '{task.title}' for {task.estimated_hours} hours",
            f"ðŸ”¥ High-impact move: Complete '{task.title}' to boost {project_name}",
            f"ðŸ’¡ Quick win incoming: '{task.title}' - estimated {task.estimated_hours}h"
        ]
        
        return suggestions[task.priority % len(suggestions)]

# Example usage and setup
if __name__ == "__main__":
    bot = HyperBotPro()
    
    # Initialize with sample data
    proj_id = bot.create_project("Ultra IPFS STL Vault", "IPFS-based STL hosting with blockchain verification", priority=1)
    bot.add_task(proj_id, "Set up IPFS node", "Configure local IPFS node for file hosting", priority=1, estimated_hours=2.0)
    bot.add_task(proj_id, "Design token system", "Create unlock token mechanism", priority=2, estimated_hours=4.0)
    
    print(bot.daily_standup())
    print("\n" + bot.suggest_next_action())