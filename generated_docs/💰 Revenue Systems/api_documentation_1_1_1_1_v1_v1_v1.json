[
  {
    "file": "dashboard_api.py",
    "endpoints": [
      "@app.route(\"/\")",
      "@app.route(\"/memory-crystals\")",
      "@app.route(\"/api/crystal-stats\")",
      "@app.route(\"/api/generate-crystal\", methods=[\"POST\"])",
      "@app.route(\"/hyper-cave\")",
      "@app.route(\"/guardian-x\")",
      "@app.route(\"/guardian-zero\")",
      "@app.route(\"/api/guardian-zero/status\")",
      "@app.route(\"/api/guardian-zero/activate\", methods=[\"POST\"])",
      "@app.route(\"/api/guardian-zero/alerts\")",
      "@app.route(\"/api/guardian-zero/actions\")",
      "@app.route(\"/api/guardian-zero/agent/<agent_name>\")",
      "@app.route(\"/api/guardian-zero/scan\", methods=[\"POST\"])",
      "@app.route(\"/api/guardian-zero/emergency\", methods=[\"POST\"])",
      "@app.route(\"/api/guardian-zero/action/<agent_name>/<action>\", methods=[\"POST\"])",
      "@app.route(\"/api/portal-status\")",
      "@app.route(\"/api/port-info\")"
    ],
    "functions": [
      "def __init__(self):",
      "def get_status(self):",
      "async def activate_all_agents(self):",
      "def get_port_config():",
      "def index() -> str:",
      "def memory_crystals_dashboard() -> str:",
      "def _get_crystal_type_from_filename(filename: str) -> str:",
      "def _generate_crystal_stats(crystal_type: str) -> Tuple[int, int, float]:",
      "def get_crystal_stats() -> Response:",
      "def _create_crystal_data(",
      "def generate_memory_crystal() -> Union[Response, Tuple[Response, int]]:",
      "def _load_dashboard_file(filename: str, error_message: str) -> str:",
      "def hyper_cave_dashboard() -> str:",
      "def guardian_x_dashboard() -> str:",
      "def guardian_zero_hud() -> str:",
      "def get_guardian_zero_status() -> Union[Response, Tuple[Response, int]]:",
      "def activate_guardian_zero() -> Union[Response, Tuple[Response, int]]:",
      "def get_guardian_alerts() -> Union[Response, Tuple[Response, int]]:",
      "def get_guardian_actions() -> Union[Response, Tuple[Response, int]]:",
      "def get_agent_status(agent_name: str) -> Union[Response, Tuple[Response, int]]:",
      "def run_guardian_scan() -> Union[Response, Tuple[Response, int]]:",
      "def guardian_emergency_protocol() -> Union[Response, Tuple[Response, int]]:",
      "def run_guardian_action(",
      "def _get_guardian_active_agent_count() -> int:",
      "def get_portal_status() -> Response:",
      "def get_port_info():"
    ],
    "description": ""
  },
  {
    "file": "dashboard_api.py",
    "endpoints": [
      "@app.route(\"/\")",
      "@app.route(\"/api/status\")",
      "@app.route(\"/api/health\")",
      "@app.route(\"/api/performance\")",
      "@app.route(\"/api/analytics\", methods=[\"GET\"])",
      "@app.route(\"/api/hyperfocus-analytics\")",
      "@app.route(\"/api/ai-squad/start\", methods=[\"POST\"])",
      "@app.route(\"/api/ai-squad/activate\", methods=[\"POST\"])",
      "@app.route(\"/api/ai-squad/status\")",
      "@app.route(\"/api/sync/status\")",
      "@app.route(\"/api/sync/viral-moments\")",
      "@app.route(\"/api/sync/revenue-attribution\")",
      "@app.route(\"/api/sync/trigger-promotion\", methods=[\"POST\"])",
      "@app.route(\"/api/sync/reports\")",
      "@app.route(\"/dev\")",
      "@app.route(\"/api/cyber-cave/status\")",
      "@app.route(\"/api/hyperdimension/battle/start\", methods=[\"POST\"])",
      "@app.route(\"/api/hyperdimension/battle/damage\", methods=[\"POST\"])",
      "@app.route(\"/api/hyperdimension/battle/status\")",
      "@app.route(\"/api/hyperdimension/user/stats\")",
      "@app.route(\"/api/hyperdimension/loot/claim\", methods=[\"POST\"])",
      "@app.route(\"/api/hyperdimension/nft/generate\", methods=[\"POST\"])",
      "@app.route(\"/tiktok-dashboard\")",
      "@app.route(\"/etsy-dashboard\")",
      "@app.route(\"/api/live-status\")",
      "@app.route(\"/api/broski/status\")",
      "@app.route(\"/api/broski/chat\", methods=[\"POST\"])",
      "@app.route(\"/api/broski/hyperfocus\", methods=[\"POST\"])",
      "@app.route(\"/api/broski/feedback\", methods=[\"POST\"])"
    ],
    "functions": [
      "def __init__(self, database_path: str, max_connections: int = 20):",
      "def _create_connection(self) -> sqlite3.Connection:",
      "def get_connection(self):",
      "def __init__(self, max_size: int = 1000, default_ttl: int = 300):",
      "def get(self, key: str) -> Optional[Any]:",
      "def set(self, key: str, value: Any, ttl: Optional[int] = None) -> None:",
      "def _cleanup_expired(self) -> None:",
      "def clear(self) -> None:",
      "def __init__(self):",
      "def log_request(self, response_time: float) -> None:",
      "def get_stats(self) -> Dict[str, Any]:",
      "def ultra_cached(ttl: int = 300, key_func=None):",
      "def decorator(func):",
      "def wrapper(*args, **kwargs):",
      "def performance_tracked(func):",
      "def wrapper(*args, **kwargs):",
      "def signal_handler(sig, frame) -> None:",
      "def init_database() -> None:",
      "def get_timestamp() -> str:",
      "def dashboard():",
      "def api_status():",
      "def api_health():",
      "def get_performance_metrics():",
      "def _get_optimization_recommendations(stats: Dict[str, Any]) -> list:",
      "def analytics():",
      "def _get_optimized_mock_analytics() -> Dict[str, Any]:",
      "def hyperfocus_analytics():",
      "def ai_squad_start():",
      "def activate_ai_squad():",
      "def get_ai_squad_status():",
      "def get_cross_platform_sync_status():",
      "def get_viral_moments():",
      "def get_revenue_attribution():",
      "def trigger_cross_promotion():",
      "def get_sync_reports():",
      "def cyber_cave_portal():",
      "def cyber_cave_status():",
      "def start_boss_battle():",
      "def deal_battle_damage():",
      "def get_battle_status():",
      "def get_hyperdimension_stats():",
      "def claim_loot_drops():",
      "def generate_dream_nft():",
      "def tiktok_dashboard():",
      "def etsy_dashboard():",
      "def get_live_status():",
      "def broski_status():",
      "def broski_chat():",
      "def broski_hyperfocus():",
      "def broski_feedback():"
    ],
    "description": ""
  },
  {
    "file": "dashboard_api_backup.py",
    "endpoints": [
      "@app.route(\"/\")",
      "@app.route(\"/api/status\")",
      "@app.route(\"/api/health\")",
      "@app.route(\"/api/performance\")",
      "@app.route(\"/api/analytics\", methods=[\"GET\"])",
      "@app.route(\"/api/hyperfocus-analytics\")",
      "@app.route(\"/api/ai-squad/start\", methods=[\"POST\"])",
      "@app.route(\"/api/ai-squad/activate\", methods=[\"POST\"])",
      "@app.route(\"/api/ai-squad/status\")",
      "@app.route(\"/api/sync/status\")",
      "@app.route(\"/api/sync/viral-moments\")",
      "@app.route(\"/api/sync/revenue-attribution\")",
      "@app.route(\"/api/sync/trigger-promotion\", methods=[\"POST\"])",
      "@app.route(\"/api/sync/reports\")",
      "@app.route(\"/dev\")",
      "@app.route(\"/api/cyber-cave/status\")",
      "@app.route(\"/api/hyperdimension/battle/start\", methods=[\"POST\"])",
      "@app.route(\"/api/hyperdimension/battle/damage\", methods=[\"POST\"])",
      "@app.route(\"/api/hyperdimension/battle/status\")",
      "@app.route(\"/api/hyperdimension/user/stats\")",
      "@app.route(\"/api/hyperdimension/loot/claim\", methods=[\"POST\"])",
      "@app.route(\"/api/hyperdimension/nft/generate\", methods=[\"POST\"])",
      "@app.route(\"/tiktok-dashboard\")",
      "@app.route(\"/etsy-dashboard\")",
      "@app.route(\"/api/live-status\")",
      "@app.route(\"/api/broski/status\")",
      "@app.route(\"/api/broski/chat\", methods=[\"POST\"])",
      "@app.route(\"/api/broski/hyperfocus\", methods=[\"POST\"])",
      "@app.route(\"/api/broski/feedback\", methods=[\"POST\"])"
    ],
    "functions": [
      "def __init__(self, database_path: str, max_connections: int = 20):",
      "def _create_connection(self) -> sqlite3.Connection:",
      "def get_connection(self):",
      "def __init__(self, max_size: int = 1000, default_ttl: int = 300):",
      "def get(self, key: str) -> Optional[Any]:",
      "def set(self, key: str, value: Any, ttl: Optional[int] = None) -> None:",
      "def _cleanup_expired(self) -> None:",
      "def clear(self) -> None:",
      "def __init__(self):",
      "def log_request(self, response_time: float) -> None:",
      "def get_stats(self) -> Dict[str, Any]:",
      "def ultra_cached(ttl: int = 300, key_func=None):",
      "def decorator(func):",
      "def wrapper(*args, **kwargs):",
      "def performance_tracked(func):",
      "def wrapper(*args, **kwargs):",
      "def signal_handler(sig, frame) -> None:",
      "def init_database() -> None:",
      "def get_timestamp() -> str:",
      "def dashboard():",
      "def api_status():",
      "def api_health():",
      "def get_performance_metrics():",
      "def _get_optimization_recommendations(stats: Dict[str, Any]) -> list:",
      "def analytics():",
      "def _get_optimized_mock_analytics() -> Dict[str, Any]:",
      "def hyperfocus_analytics():",
      "def ai_squad_start():",
      "def activate_ai_squad():",
      "def get_ai_squad_status():",
      "def get_cross_platform_sync_status():",
      "def get_viral_moments():",
      "def get_revenue_attribution():",
      "def trigger_cross_promotion():",
      "def get_sync_reports():",
      "def cyber_cave_portal():",
      "def cyber_cave_status():",
      "def start_boss_battle():",
      "def deal_battle_damage():",
      "def get_battle_status():",
      "def get_hyperdimension_stats():",
      "def claim_loot_drops():",
      "def generate_dream_nft():",
      "def tiktok_dashboard():",
      "def etsy_dashboard():",
      "def get_live_status():",
      "def broski_status():",
      "def broski_chat():",
      "def broski_hyperfocus():",
      "def broski_feedback():"
    ],
    "description": ""
  },
  {
    "file": "api.py",
    "endpoints": [],
    "functions": [
      "def __init__(self, backend=None):",
      "def cdef(self, csource, override=False, packed=False, pack=None):",
      "cdef are packed, i.e. laid out without any field alignment at all.",
      "def embedding_api(self, csource, packed=False, pack=None):",
      "def _cdef(self, csource, override=False, **options):",
      "def dlopen(self, name, flags=0):",
      "def dlclose(self, lib):",
      "def _typeof_locked(self, cdecl):",
      "def _typeof(self, cdecl, consider_function_as_funcptr=False):",
      "def typeof(self, cdecl):",
      "def sizeof(self, cdecl):",
      "def alignof(self, cdecl):",
      "def offsetof(self, cdecl, *fields_or_indexes):",
      "def new(self, cdecl, init=None):",
      "def new_allocator(self, alloc=None, free=None,",
      "def allocate(cdecl, init=None):",
      "def cast(self, cdecl, source):",
      "def string(self, cdata, maxlen=-1):",
      "def unpack(self, cdata, length):",
      "def from_buffer(self, cdecl, python_buffer=_unspecified,",
      "def memmove(self, dest, src, n):",
      "def callback(self, cdecl, python_callable=None, error=None, onerror=None):",
      "def callback_decorator_wrap(python_callable):",
      "def getctype(self, cdecl, replace_with=''):",
      "def gc(self, cdata, destructor, size=0):",
      "def _get_cached_btype(self, type):",
      "def verify(self, source='', tmpdir=None, **kwargs):",
      "def _get_errno(self):",
      "def _set_errno(self, errno):",
      "def getwinerror(self, code=-1):",
      "def _pointer_to(self, ctype):",
      "def addressof(self, cdata, *fields_or_indexes):",
      "def _typeoffsetof(self, ctype, field_or_index, *fields_or_indexes):",
      "def include(self, ffi_to_include):",
      "def new_handle(self, x):",
      "def from_handle(self, x):",
      "def release(self, x):",
      "def set_unicode(self, enabled_flag):",
      "self.cdef(\"typedef wchar_t TBYTE;\"",
      "\"typedef wchar_t TCHAR;\"",
      "\"typedef const wchar_t *LPCTSTR;\"",
      "\"typedef const wchar_t *PCTSTR;\"",
      "\"typedef wchar_t *LPTSTR;\"",
      "\"typedef wchar_t *PTSTR;\"",
      "\"typedef TBYTE *PTBYTE;\"",
      "\"typedef TCHAR *PTCHAR;\")",
      "self.cdef(\"typedef char TBYTE;\"",
      "\"typedef char TCHAR;\"",
      "\"typedef const char *LPCTSTR;\"",
      "\"typedef const char *PCTSTR;\"",
      "\"typedef char *LPTSTR;\"",
      "\"typedef char *PTSTR;\"",
      "\"typedef TBYTE *PTBYTE;\"",
      "\"typedef TCHAR *PTCHAR;\")",
      "def _apply_windows_unicode(self, kwds):",
      "def _apply_embedding_fix(self, kwds):",
      "def ensure(key, value):",
      "def set_source(self, module_name, source, source_extension='.c', **kwds):",
      "def set_source_pkgconfig(self, module_name, pkgconfig_libs, source,",
      "def distutils_extension(self, tmpdir='build', verbose=True):",
      "def emit_c_code(self, filename):",
      "def emit_python_code(self, filename):",
      "def compile(self, tmpdir='.', verbose=0, target=None, debug=None):",
      "def init_once(self, func, tag):",
      "def embedding_init_code(self, pysource):",
      "def def_extern(self, *args, **kwds):",
      "def list_types(self):",
      "if key.startswith('typedef '):",
      "def _load_backend_lib(backend, name, flags):",
      "def _make_ffi_library(ffi, libname, flags):",
      "def accessor_function(name):",
      "def accessor_variable(name):",
      "def addressof_var(name):",
      "def accessor_constant(name):",
      "def accessor_int_constant(name):",
      "def update_accessors():",
      "def accessor_enum(name, tp=tp, i=i):",
      "def make_accessor(name):",
      "def __getattr__(self, name):",
      "def __setattr__(self, name, value):",
      "def __dir__(self):",
      "def __addressof__(self, name):",
      "def __cffi_close__(self):",
      "def _builtin_function_type(func):"
    ],
    "description": ""
  },
  {
    "file": "api.py",
    "endpoints": [],
    "functions": [
      "def request(method, url, **kwargs):",
      "def get(url, params=None, **kwargs):",
      "def options(url, **kwargs):",
      "def head(url, **kwargs):",
      "def post(url, data=None, json=None, **kwargs):",
      "def put(url, data=None, **kwargs):",
      "def patch(url, data=None, **kwargs):",
      "def delete(url, **kwargs):"
    ],
    "description": ""
  },
  {
    "file": "api.py",
    "endpoints": [],
    "functions": [
      "def from_bytes(",
      "def from_fp(",
      "def from_path(",
      "def is_binary("
    ],
    "description": ""
  },
  {
    "file": "api.py",
    "endpoints": [],
    "functions": [
      "def get_objs_combined_axis(",
      "def _get_distinct_objs(objs: list[Index]) -> list[Index]:",
      "def _get_combined_index(",
      "def safe_sort_index(index: Index) -> Index:",
      "def union_indexes(indexes, sort: bool | None = True) -> Index:",
      "def _unique_indices(inds, dtype) -> Index:",
      "def conv(i):",
      "def _find_common_index_dtype(inds):",
      "def _sanitize_and_check(indexes):",
      "def all_indexes_same(indexes) -> bool:",
      "def default_index(n: int) -> RangeIndex:"
    ],
    "description": ""
  },
  {
    "file": "api.py",
    "endpoints": [],
    "functions": [
      "def make_block(",
      "def maybe_infer_ndim(values, placement: BlockPlacement, ndim: int | None) -> int:",
      "def __getattr__(name: str):"
    ],
    "description": ""
  },
  {
    "file": "api.py",
    "endpoints": [],
    "functions": [
      "def __init__(  # noqa: PLR0913",
      "def _append_app_name_and_version(self, *base: str) -> str:",
      "def _optionally_create_directory(self, path: str) -> None:",
      "def user_data_dir(self) -> str:",
      "def site_data_dir(self) -> str:",
      "def user_config_dir(self) -> str:",
      "def site_config_dir(self) -> str:",
      "def user_cache_dir(self) -> str:",
      "def site_cache_dir(self) -> str:",
      "def user_state_dir(self) -> str:",
      "def user_log_dir(self) -> str:",
      "def user_documents_dir(self) -> str:",
      "def user_downloads_dir(self) -> str:",
      "def user_pictures_dir(self) -> str:",
      "def user_videos_dir(self) -> str:",
      "def user_music_dir(self) -> str:",
      "def user_runtime_dir(self) -> str:",
      "def user_data_path(self) -> Path:",
      "def site_data_path(self) -> Path:",
      "def user_config_path(self) -> Path:",
      "def site_config_path(self) -> Path:",
      "def user_cache_path(self) -> Path:",
      "def site_cache_path(self) -> Path:",
      "def user_state_path(self) -> Path:",
      "def user_log_path(self) -> Path:",
      "def user_documents_path(self) -> Path:",
      "def user_downloads_path(self) -> Path:",
      "def user_pictures_path(self) -> Path:",
      "def user_videos_path(self) -> Path:",
      "def user_music_path(self) -> Path:",
      "def user_runtime_path(self) -> Path:"
    ],
    "description": ""
  },
  {
    "file": "api.py",
    "endpoints": [],
    "functions": [
      "def request(method, url, **kwargs):",
      "def get(url, params=None, **kwargs):",
      "def options(url, **kwargs):",
      "def head(url, **kwargs):",
      "def post(url, data=None, json=None, **kwargs):",
      "def put(url, data=None, **kwargs):",
      "def patch(url, data=None, **kwargs):",
      "def delete(url, **kwargs):"
    ],
    "description": ""
  },
  {
    "file": "api.py",
    "endpoints": [],
    "functions": [
      "def __init__(self, backend=None):",
      "def cdef(self, csource, override=False, packed=False, pack=None):",
      "cdef are packed, i.e. laid out without any field alignment at all.",
      "def embedding_api(self, csource, packed=False, pack=None):",
      "def _cdef(self, csource, override=False, **options):",
      "def dlopen(self, name, flags=0):",
      "def dlclose(self, lib):",
      "def _typeof_locked(self, cdecl):",
      "def _typeof(self, cdecl, consider_function_as_funcptr=False):",
      "def typeof(self, cdecl):",
      "def sizeof(self, cdecl):",
      "def alignof(self, cdecl):",
      "def offsetof(self, cdecl, *fields_or_indexes):",
      "def new(self, cdecl, init=None):",
      "def new_allocator(self, alloc=None, free=None,",
      "def allocate(cdecl, init=None):",
      "def cast(self, cdecl, source):",
      "def string(self, cdata, maxlen=-1):",
      "def unpack(self, cdata, length):",
      "def from_buffer(self, cdecl, python_buffer=_unspecified,",
      "def memmove(self, dest, src, n):",
      "def callback(self, cdecl, python_callable=None, error=None, onerror=None):",
      "def callback_decorator_wrap(python_callable):",
      "def getctype(self, cdecl, replace_with=''):",
      "def gc(self, cdata, destructor, size=0):",
      "def _get_cached_btype(self, type):",
      "def verify(self, source='', tmpdir=None, **kwargs):",
      "def _get_errno(self):",
      "def _set_errno(self, errno):",
      "def getwinerror(self, code=-1):",
      "def _pointer_to(self, ctype):",
      "def addressof(self, cdata, *fields_or_indexes):",
      "def _typeoffsetof(self, ctype, field_or_index, *fields_or_indexes):",
      "def include(self, ffi_to_include):",
      "def new_handle(self, x):",
      "def from_handle(self, x):",
      "def release(self, x):",
      "def set_unicode(self, enabled_flag):",
      "self.cdef(\"typedef wchar_t TBYTE;\"",
      "\"typedef wchar_t TCHAR;\"",
      "\"typedef const wchar_t *LPCTSTR;\"",
      "\"typedef const wchar_t *PCTSTR;\"",
      "\"typedef wchar_t *LPTSTR;\"",
      "\"typedef wchar_t *PTSTR;\"",
      "\"typedef TBYTE *PTBYTE;\"",
      "\"typedef TCHAR *PTCHAR;\")",
      "self.cdef(\"typedef char TBYTE;\"",
      "\"typedef char TCHAR;\"",
      "\"typedef const char *LPCTSTR;\"",
      "\"typedef const char *PCTSTR;\"",
      "\"typedef char *LPTSTR;\"",
      "\"typedef char *PTSTR;\"",
      "\"typedef TBYTE *PTBYTE;\"",
      "\"typedef TCHAR *PTCHAR;\")",
      "def _apply_windows_unicode(self, kwds):",
      "def _apply_embedding_fix(self, kwds):",
      "def ensure(key, value):",
      "def set_source(self, module_name, source, source_extension='.c', **kwds):",
      "def set_source_pkgconfig(self, module_name, pkgconfig_libs, source,",
      "def distutils_extension(self, tmpdir='build', verbose=True):",
      "def emit_c_code(self, filename):",
      "def emit_python_code(self, filename):",
      "def compile(self, tmpdir='.', verbose=0, target=None, debug=None):",
      "def init_once(self, func, tag):",
      "def embedding_init_code(self, pysource):",
      "def def_extern(self, *args, **kwds):",
      "def list_types(self):",
      "if key.startswith('typedef '):",
      "def _load_backend_lib(backend, name, flags):",
      "def _make_ffi_library(ffi, libname, flags):",
      "def accessor_function(name):",
      "def accessor_variable(name):",
      "def addressof_var(name):",
      "def accessor_constant(name):",
      "def accessor_int_constant(name):",
      "def update_accessors():",
      "def accessor_enum(name, tp=tp, i=i):",
      "def make_accessor(name):",
      "def __getattr__(self, name):",
      "def __setattr__(self, name, value):",
      "def __dir__(self):",
      "def __addressof__(self, name):",
      "def __cffi_close__(self):",
      "def _builtin_function_type(func):"
    ],
    "description": ""
  },
  {
    "file": "api.py",
    "endpoints": [],
    "functions": [
      "def get(",
      "def get(",
      "def get(",
      "def get(",
      "def get(",
      "def get(*args: Any, **kwargs: Any) -> Arrow:",
      "def utcnow() -> Arrow:",
      "def now(tz: Optional[TZ_EXPR] = None) -> Arrow:",
      "def factory(type: Type[Arrow]) -> ArrowFactory:"
    ],
    "description": ""
  },
  {
    "file": "api.py",
    "endpoints": [],
    "functions": [
      "def __init__(  # noqa: PLR0913, PLR0917",
      "def _append_app_name_and_version(self, *base: str) -> str:",
      "def _optionally_create_directory(self, path: str) -> None:",
      "def _first_item_as_path_if_multipath(self, directory: str) -> Path:",
      "def user_data_dir(self) -> str:",
      "def site_data_dir(self) -> str:",
      "def user_config_dir(self) -> str:",
      "def site_config_dir(self) -> str:",
      "def user_cache_dir(self) -> str:",
      "def site_cache_dir(self) -> str:",
      "def user_state_dir(self) -> str:",
      "def user_log_dir(self) -> str:",
      "def user_documents_dir(self) -> str:",
      "def user_downloads_dir(self) -> str:",
      "def user_pictures_dir(self) -> str:",
      "def user_videos_dir(self) -> str:",
      "def user_music_dir(self) -> str:",
      "def user_desktop_dir(self) -> str:",
      "def user_runtime_dir(self) -> str:",
      "def site_runtime_dir(self) -> str:",
      "def user_data_path(self) -> Path:",
      "def site_data_path(self) -> Path:",
      "def user_config_path(self) -> Path:",
      "def site_config_path(self) -> Path:",
      "def user_cache_path(self) -> Path:",
      "def site_cache_path(self) -> Path:",
      "def user_state_path(self) -> Path:",
      "def user_log_path(self) -> Path:",
      "def user_documents_path(self) -> Path:",
      "def user_downloads_path(self) -> Path:",
      "def user_pictures_path(self) -> Path:",
      "def user_videos_path(self) -> Path:",
      "def user_music_path(self) -> Path:",
      "def user_desktop_path(self) -> Path:",
      "def user_runtime_path(self) -> Path:",
      "def site_runtime_path(self) -> Path:",
      "def iter_config_dirs(self) -> Iterator[str]:",
      "def iter_data_dirs(self) -> Iterator[str]:",
      "def iter_cache_dirs(self) -> Iterator[str]:",
      "def iter_runtime_dirs(self) -> Iterator[str]:",
      "def iter_config_paths(self) -> Iterator[Path]:",
      "def iter_data_paths(self) -> Iterator[Path]:",
      "def iter_cache_paths(self) -> Iterator[Path]:",
      "def iter_runtime_paths(self) -> Iterator[Path]:"
    ],
    "description": ""
  },
  {
    "file": "api_handlers.py",
    "endpoints": [],
    "functions": [
      "def get(self) -> None:",
      "def post(self) -> None:",
      "def get(self, name: str) -> None:",
      "async def delete(self, name: str) -> None:"
    ],
    "description": ""
  },
  {
    "file": "api.py",
    "endpoints": [],
    "functions": [
      "def check(codeString, filename, reporter=None):",
      "def checkPath(filename, reporter=None):",
      "def isPythonFile(filename):",
      "def iterSourceCode(paths):",
      "def checkRecursive(paths, reporter):",
      "def _exitOnSignal(sigName, message):",
      "def handler(sig, f):",
      "def _get_version():",
      "def main(prog=None, args=None):"
    ],
    "description": ""
  },
  {
    "file": "api.py",
    "endpoints": [],
    "functions": [
      "def request(method, url, **kwargs):",
      "def get(url, params=None, **kwargs):",
      "def options(url, **kwargs):",
      "def head(url, **kwargs):",
      "def post(url, data=None, json=None, **kwargs):",
      "def put(url, data=None, **kwargs):",
      "def patch(url, data=None, **kwargs):",
      "def delete(url, **kwargs):"
    ],
    "description": ""
  },
  {
    "file": "api.py",
    "endpoints": [],
    "functions": [
      "def from_bytes(",
      "def from_fp(",
      "def from_path(",
      "def is_binary("
    ],
    "description": ""
  },
  {
    "file": "api.py",
    "endpoints": [],
    "functions": [
      "def get_objs_combined_axis(",
      "def _get_distinct_objs(objs: list[Index]) -> list[Index]:",
      "def _get_combined_index(",
      "def safe_sort_index(index: Index) -> Index:",
      "def union_indexes(indexes, sort: bool | None = True) -> Index:",
      "def _unique_indices(inds, dtype) -> Index:",
      "def conv(i):",
      "def _find_common_index_dtype(inds):",
      "def _sanitize_and_check(indexes):",
      "def all_indexes_same(indexes) -> bool:",
      "def default_index(n: int) -> RangeIndex:"
    ],
    "description": ""
  },
  {
    "file": "api.py",
    "endpoints": [],
    "functions": [
      "def make_block(",
      "def maybe_infer_ndim(values, placement: BlockPlacement, ndim: int | None) -> int:",
      "def __getattr__(name: str):"
    ],
    "description": ""
  },
  {
    "file": "api.py",
    "endpoints": [],
    "functions": [
      "def _settrace(*args, **kwargs):",
      "def ensure_logging():",
      "def log_to(path):",
      "def configure(properties=None, **kwargs):",
      "def _starts_debugging(func):",
      "def debug(address, **kwargs):",
      "def listen(address, settrace_kwargs, in_process_debug_adapter=False):",
      "def connect(address, settrace_kwargs, access_token=None):",
      "def __call__(self):",
      "def cancel():",
      "def is_client_connected():",
      "def breakpoint():",
      "def debug_this_thread():",
      "def trace_this_thread(should_trace):"
    ],
    "description": ""
  },
  {
    "file": "api.py",
    "endpoints": [],
    "functions": [
      "def get_original(mod_name, item_name):",
      "def patch_item(module, attr, newitem):",
      "def remove_item(module, attr):",
      "def patch_module(target_module, source_module, items=None,",
      "def __init__(self,",
      "def __repr__(self):",
      "def default_patch_items(self):",
      "def remove_item(self, target_module, *items):",
      "def __call_module_hook(gevent_module, name, module, items, _warnings):",
      "def warn(message):"
    ],
    "description": ""
  },
  {
    "file": "api.py",
    "endpoints": [],
    "functions": [
      "def __init__(  # noqa: PLR0913, PLR0917",
      "def _append_app_name_and_version(self, *base: str) -> str:",
      "def _optionally_create_directory(self, path: str) -> None:",
      "def user_data_dir(self) -> str:",
      "def site_data_dir(self) -> str:",
      "def user_config_dir(self) -> str:",
      "def site_config_dir(self) -> str:",
      "def user_cache_dir(self) -> str:",
      "def site_cache_dir(self) -> str:",
      "def user_state_dir(self) -> str:",
      "def user_log_dir(self) -> str:",
      "def user_documents_dir(self) -> str:",
      "def user_downloads_dir(self) -> str:",
      "def user_pictures_dir(self) -> str:",
      "def user_videos_dir(self) -> str:",
      "def user_music_dir(self) -> str:",
      "def user_desktop_dir(self) -> str:",
      "def user_runtime_dir(self) -> str:",
      "def site_runtime_dir(self) -> str:",
      "def user_data_path(self) -> Path:",
      "def site_data_path(self) -> Path:",
      "def user_config_path(self) -> Path:",
      "def site_config_path(self) -> Path:",
      "def user_cache_path(self) -> Path:",
      "def site_cache_path(self) -> Path:",
      "def user_state_path(self) -> Path:",
      "def user_log_path(self) -> Path:",
      "def user_documents_path(self) -> Path:",
      "def user_downloads_path(self) -> Path:",
      "def user_pictures_path(self) -> Path:",
      "def user_videos_path(self) -> Path:",
      "def user_music_path(self) -> Path:",
      "def user_desktop_path(self) -> Path:",
      "def user_runtime_path(self) -> Path:",
      "def site_runtime_path(self) -> Path:",
      "def iter_config_dirs(self) -> Iterator[str]:",
      "def iter_data_dirs(self) -> Iterator[str]:",
      "def iter_cache_dirs(self) -> Iterator[str]:",
      "def iter_runtime_dirs(self) -> Iterator[str]:",
      "def iter_config_paths(self) -> Iterator[Path]:",
      "def iter_data_paths(self) -> Iterator[Path]:",
      "def iter_cache_paths(self) -> Iterator[Path]:",
      "def iter_runtime_paths(self) -> Iterator[Path]:"
    ],
    "description": ""
  },
  {
    "file": "api.py",
    "endpoints": [],
    "functions": [
      "def __init__(  # noqa: PLR0913",
      "def _append_app_name_and_version(self, *base: str) -> str:",
      "def _optionally_create_directory(self, path: str) -> None:",
      "def user_data_dir(self) -> str:",
      "def site_data_dir(self) -> str:",
      "def user_config_dir(self) -> str:",
      "def site_config_dir(self) -> str:",
      "def user_cache_dir(self) -> str:",
      "def site_cache_dir(self) -> str:",
      "def user_state_dir(self) -> str:",
      "def user_log_dir(self) -> str:",
      "def user_documents_dir(self) -> str:",
      "def user_downloads_dir(self) -> str:",
      "def user_pictures_dir(self) -> str:",
      "def user_videos_dir(self) -> str:",
      "def user_music_dir(self) -> str:",
      "def user_runtime_dir(self) -> str:",
      "def user_data_path(self) -> Path:",
      "def site_data_path(self) -> Path:",
      "def user_config_path(self) -> Path:",
      "def site_config_path(self) -> Path:",
      "def user_cache_path(self) -> Path:",
      "def site_cache_path(self) -> Path:",
      "def user_state_path(self) -> Path:",
      "def user_log_path(self) -> Path:",
      "def user_documents_path(self) -> Path:",
      "def user_downloads_path(self) -> Path:",
      "def user_pictures_path(self) -> Path:",
      "def user_videos_path(self) -> Path:",
      "def user_music_path(self) -> Path:",
      "def user_runtime_path(self) -> Path:"
    ],
    "description": ""
  },
  {
    "file": "api.py",
    "endpoints": [],
    "functions": [
      "def request(method, url, **kwargs):",
      "def get(url, params=None, **kwargs):",
      "def options(url, **kwargs):",
      "def head(url, **kwargs):",
      "def post(url, data=None, json=None, **kwargs):",
      "def put(url, data=None, **kwargs):",
      "def patch(url, data=None, **kwargs):",
      "def delete(url, **kwargs):"
    ],
    "description": ""
  }
]