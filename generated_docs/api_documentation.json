[
  {
    "file": "dashboard_api.py",
    "endpoints": [
      "@app.route('/')",
      "@app.route('/api/status')",
      "@app.route('/api/create-product', methods=['POST'])",
      "@app.route('/api/generate-docs', methods=['POST'])",
      "@app.route('/api/analytics', methods=['GET'])",
      "@app.route('/api/social-metrics')",
      "@app.route('/api/refresh-social-data', methods=['POST'])",
      "@app.route('/api/setup-social-apis', methods=['POST'])",
      "@app.route('/api/master-control-stats')",
      "@app.route('/api/launch-campaign', methods=['POST'])",
      "@app.route('/api/sync-systems', methods=['POST'])",
      "@app.route('/master-control')",
      "@app.route('/api/sync-all-systems', methods=['POST'])",
      "@app.route('/ultra')",
      "@app.route('/api/broski/chat', methods=['POST'])",
      "@app.route('/api/hyperfocus/toggle', methods=['POST'])",
      "@app.route('/api/squad/status')",
      "@app.route('/api/gamification/stats')",
      "@app.route('/api/dashboard-stats')",
      "@app.route('/api/ai-squad/start', methods=['POST'])",
      "@app.route('/api/projects')",
      "@app.route('/api/projects/<int:project_id>/update', methods=['POST'])",
      "@app.route('/api/project-update', methods=['POST'])",
      "@app.route('/api/empire-status')",
      "@app.route('/api/hyperfocus-analytics')",
      "@app.route('/api/launch-ai-squad', methods=['POST'])",
      "@app.route('/api/run-task/<task_name>')"
    ],
    "functions": [
      "def signal_handler(sig, frame):",
      "def init_database():",
      "def dashboard():",
      "def api_status():",
      "def create_product():",
      "def generate_docs():",
      "def analytics():",
      "def social_metrics():",
      "def refresh_social_data():",
      "def setup_social_apis():",
      "def master_control_stats():",
      "def get_etsy_stats():",
      "def get_tiktok_stats():",
      "def get_print_queue_stats():",
      "def get_ai_stats():",
      "def get_analytics_stats():",
      "def launch_campaign():",
      "def sync_systems():",
      "def master_control_brain():",
      "def sync_all_systems():",
      "def not_found(error):",
      "def internal_error(error):",
      "def ultra_dashboard():",
      "def broski_chat():",
      "def toggle_hyperfocus():",
      "def squad_status():",
      "def gamification_stats():",
      "def dashboard_stats():",
      "def ai_squad_start():",
      "def projects_list():",
      "def update_project(project_id):",
      "def project_update():",
      "def empire_status():",
      "def hyperfocus_analytics():",
      "def launch_ai_squad():",
      "def run_task(task_name):"
    ],
    "description": ""
  },
  {
    "file": "api.py",
    "endpoints": [],
    "functions": [
      "def __init__(self, backend=None):",
      "def cdef(self, csource, override=False, packed=False, pack=None):",
      "cdef are packed, i.e. laid out without any field alignment at all.",
      "def embedding_api(self, csource, packed=False, pack=None):",
      "def _cdef(self, csource, override=False, **options):",
      "def dlopen(self, name, flags=0):",
      "def dlclose(self, lib):",
      "def _typeof_locked(self, cdecl):",
      "def _typeof(self, cdecl, consider_function_as_funcptr=False):",
      "def typeof(self, cdecl):",
      "def sizeof(self, cdecl):",
      "def alignof(self, cdecl):",
      "def offsetof(self, cdecl, *fields_or_indexes):",
      "def new(self, cdecl, init=None):",
      "def new_allocator(self, alloc=None, free=None,",
      "def allocate(cdecl, init=None):",
      "def cast(self, cdecl, source):",
      "def string(self, cdata, maxlen=-1):",
      "def unpack(self, cdata, length):",
      "def from_buffer(self, cdecl, python_buffer=_unspecified,",
      "def memmove(self, dest, src, n):",
      "def callback(self, cdecl, python_callable=None, error=None, onerror=None):",
      "def callback_decorator_wrap(python_callable):",
      "def getctype(self, cdecl, replace_with=''):",
      "def gc(self, cdata, destructor, size=0):",
      "def _get_cached_btype(self, type):",
      "def verify(self, source='', tmpdir=None, **kwargs):",
      "def _get_errno(self):",
      "def _set_errno(self, errno):",
      "def getwinerror(self, code=-1):",
      "def _pointer_to(self, ctype):",
      "def addressof(self, cdata, *fields_or_indexes):",
      "def _typeoffsetof(self, ctype, field_or_index, *fields_or_indexes):",
      "def include(self, ffi_to_include):",
      "def new_handle(self, x):",
      "def from_handle(self, x):",
      "def release(self, x):",
      "def set_unicode(self, enabled_flag):",
      "self.cdef(\"typedef wchar_t TBYTE;\"",
      "\"typedef wchar_t TCHAR;\"",
      "\"typedef const wchar_t *LPCTSTR;\"",
      "\"typedef const wchar_t *PCTSTR;\"",
      "\"typedef wchar_t *LPTSTR;\"",
      "\"typedef wchar_t *PTSTR;\"",
      "\"typedef TBYTE *PTBYTE;\"",
      "\"typedef TCHAR *PTCHAR;\")",
      "self.cdef(\"typedef char TBYTE;\"",
      "\"typedef char TCHAR;\"",
      "\"typedef const char *LPCTSTR;\"",
      "\"typedef const char *PCTSTR;\"",
      "\"typedef char *LPTSTR;\"",
      "\"typedef char *PTSTR;\"",
      "\"typedef TBYTE *PTBYTE;\"",
      "\"typedef TCHAR *PTCHAR;\")",
      "def _apply_windows_unicode(self, kwds):",
      "def _apply_embedding_fix(self, kwds):",
      "def ensure(key, value):",
      "def set_source(self, module_name, source, source_extension='.c', **kwds):",
      "def set_source_pkgconfig(self, module_name, pkgconfig_libs, source,",
      "def distutils_extension(self, tmpdir='build', verbose=True):",
      "def emit_c_code(self, filename):",
      "def emit_python_code(self, filename):",
      "def compile(self, tmpdir='.', verbose=0, target=None, debug=None):",
      "def init_once(self, func, tag):",
      "def embedding_init_code(self, pysource):",
      "def def_extern(self, *args, **kwds):",
      "def list_types(self):",
      "if key.startswith('typedef '):",
      "def _load_backend_lib(backend, name, flags):",
      "def _make_ffi_library(ffi, libname, flags):",
      "def accessor_function(name):",
      "def accessor_variable(name):",
      "def addressof_var(name):",
      "def accessor_constant(name):",
      "def accessor_int_constant(name):",
      "def update_accessors():",
      "def accessor_enum(name, tp=tp, i=i):",
      "def make_accessor(name):",
      "def __getattr__(self, name):",
      "def __setattr__(self, name, value):",
      "def __dir__(self):",
      "def __addressof__(self, name):",
      "def __cffi_close__(self):",
      "def _builtin_function_type(func):"
    ],
    "description": ""
  },
  {
    "file": "api.py",
    "endpoints": [],
    "functions": [
      "def from_bytes(",
      "def from_fp(",
      "def from_path(",
      "def is_binary("
    ],
    "description": ""
  },
  {
    "file": "api.py",
    "endpoints": [],
    "functions": [
      "def request(method, url, **kwargs):",
      "def get(url, params=None, **kwargs):",
      "def options(url, **kwargs):",
      "def head(url, **kwargs):",
      "def post(url, data=None, json=None, **kwargs):",
      "def put(url, data=None, **kwargs):",
      "def patch(url, data=None, **kwargs):",
      "def delete(url, **kwargs):"
    ],
    "description": ""
  },
  {
    "file": "api.py",
    "endpoints": [],
    "functions": [
      "def __init__(  # noqa: PLR0913, PLR0917",
      "def _append_app_name_and_version(self, *base: str) -> str:",
      "def _optionally_create_directory(self, path: str) -> None:",
      "def _first_item_as_path_if_multipath(self, directory: str) -> Path:",
      "def user_data_dir(self) -> str:",
      "def site_data_dir(self) -> str:",
      "def user_config_dir(self) -> str:",
      "def site_config_dir(self) -> str:",
      "def user_cache_dir(self) -> str:",
      "def site_cache_dir(self) -> str:",
      "def user_state_dir(self) -> str:",
      "def user_log_dir(self) -> str:",
      "def user_documents_dir(self) -> str:",
      "def user_downloads_dir(self) -> str:",
      "def user_pictures_dir(self) -> str:",
      "def user_videos_dir(self) -> str:",
      "def user_music_dir(self) -> str:",
      "def user_desktop_dir(self) -> str:",
      "def user_runtime_dir(self) -> str:",
      "def site_runtime_dir(self) -> str:",
      "def user_data_path(self) -> Path:",
      "def site_data_path(self) -> Path:",
      "def user_config_path(self) -> Path:",
      "def site_config_path(self) -> Path:",
      "def user_cache_path(self) -> Path:",
      "def site_cache_path(self) -> Path:",
      "def user_state_path(self) -> Path:",
      "def user_log_path(self) -> Path:",
      "def user_documents_path(self) -> Path:",
      "def user_downloads_path(self) -> Path:",
      "def user_pictures_path(self) -> Path:",
      "def user_videos_path(self) -> Path:",
      "def user_music_path(self) -> Path:",
      "def user_desktop_path(self) -> Path:",
      "def user_runtime_path(self) -> Path:",
      "def site_runtime_path(self) -> Path:",
      "def iter_config_dirs(self) -> Iterator[str]:",
      "def iter_data_dirs(self) -> Iterator[str]:",
      "def iter_cache_dirs(self) -> Iterator[str]:",
      "def iter_runtime_dirs(self) -> Iterator[str]:",
      "def iter_config_paths(self) -> Iterator[Path]:",
      "def iter_data_paths(self) -> Iterator[Path]:",
      "def iter_cache_paths(self) -> Iterator[Path]:",
      "def iter_runtime_paths(self) -> Iterator[Path]:"
    ],
    "description": ""
  },
  {
    "file": "api.py",
    "endpoints": [],
    "functions": [
      "def request(method, url, **kwargs):",
      "def get(url, params=None, **kwargs):",
      "def options(url, **kwargs):",
      "def head(url, **kwargs):",
      "def post(url, data=None, json=None, **kwargs):",
      "def put(url, data=None, **kwargs):",
      "def patch(url, data=None, **kwargs):",
      "def delete(url, **kwargs):"
    ],
    "description": ""
  },
  {
    "file": "api.py",
    "endpoints": [],
    "functions": [
      "def get_objs_combined_axis(",
      "def _get_distinct_objs(objs: list[Index]) -> list[Index]:",
      "def _get_combined_index(",
      "def safe_sort_index(index: Index) -> Index:",
      "def union_indexes(indexes, sort: bool | None = True) -> Index:",
      "def _unique_indices(inds, dtype) -> Index:",
      "def conv(i):",
      "def _find_common_index_dtype(inds):",
      "def _sanitize_and_check(indexes):",
      "def all_indexes_same(indexes) -> bool:",
      "def default_index(n: int) -> RangeIndex:"
    ],
    "description": ""
  },
  {
    "file": "api.py",
    "endpoints": [],
    "functions": [
      "def make_block(",
      "def maybe_infer_ndim(values, placement: BlockPlacement, ndim: int | None) -> int:",
      "def __getattr__(name: str):"
    ],
    "description": ""
  },
  {
    "file": "api.py",
    "endpoints": [],
    "functions": [
      "def __init__(self, backend=None):",
      "def cdef(self, csource, override=False, packed=False, pack=None):",
      "cdef are packed, i.e. laid out without any field alignment at all.",
      "def embedding_api(self, csource, packed=False, pack=None):",
      "def _cdef(self, csource, override=False, **options):",
      "def dlopen(self, name, flags=0):",
      "def dlclose(self, lib):",
      "def _typeof_locked(self, cdecl):",
      "def _typeof(self, cdecl, consider_function_as_funcptr=False):",
      "def typeof(self, cdecl):",
      "def sizeof(self, cdecl):",
      "def alignof(self, cdecl):",
      "def offsetof(self, cdecl, *fields_or_indexes):",
      "def new(self, cdecl, init=None):",
      "def new_allocator(self, alloc=None, free=None,",
      "def allocate(cdecl, init=None):",
      "def cast(self, cdecl, source):",
      "def string(self, cdata, maxlen=-1):",
      "def unpack(self, cdata, length):",
      "def from_buffer(self, cdecl, python_buffer=_unspecified,",
      "def memmove(self, dest, src, n):",
      "def callback(self, cdecl, python_callable=None, error=None, onerror=None):",
      "def callback_decorator_wrap(python_callable):",
      "def getctype(self, cdecl, replace_with=''):",
      "def gc(self, cdata, destructor, size=0):",
      "def _get_cached_btype(self, type):",
      "def verify(self, source='', tmpdir=None, **kwargs):",
      "def _get_errno(self):",
      "def _set_errno(self, errno):",
      "def getwinerror(self, code=-1):",
      "def _pointer_to(self, ctype):",
      "def addressof(self, cdata, *fields_or_indexes):",
      "def _typeoffsetof(self, ctype, field_or_index, *fields_or_indexes):",
      "def include(self, ffi_to_include):",
      "def new_handle(self, x):",
      "def from_handle(self, x):",
      "def release(self, x):",
      "def set_unicode(self, enabled_flag):",
      "self.cdef(\"typedef wchar_t TBYTE;\"",
      "\"typedef wchar_t TCHAR;\"",
      "\"typedef const wchar_t *LPCTSTR;\"",
      "\"typedef const wchar_t *PCTSTR;\"",
      "\"typedef wchar_t *LPTSTR;\"",
      "\"typedef wchar_t *PTSTR;\"",
      "\"typedef TBYTE *PTBYTE;\"",
      "\"typedef TCHAR *PTCHAR;\")",
      "self.cdef(\"typedef char TBYTE;\"",
      "\"typedef char TCHAR;\"",
      "\"typedef const char *LPCTSTR;\"",
      "\"typedef const char *PCTSTR;\"",
      "\"typedef char *LPTSTR;\"",
      "\"typedef char *PTSTR;\"",
      "\"typedef TBYTE *PTBYTE;\"",
      "\"typedef TCHAR *PTCHAR;\")",
      "def _apply_windows_unicode(self, kwds):",
      "def _apply_embedding_fix(self, kwds):",
      "def ensure(key, value):",
      "def set_source(self, module_name, source, source_extension='.c', **kwds):",
      "def set_source_pkgconfig(self, module_name, pkgconfig_libs, source,",
      "def distutils_extension(self, tmpdir='build', verbose=True):",
      "def emit_c_code(self, filename):",
      "def emit_python_code(self, filename):",
      "def compile(self, tmpdir='.', verbose=0, target=None, debug=None):",
      "def init_once(self, func, tag):",
      "def embedding_init_code(self, pysource):",
      "def def_extern(self, *args, **kwds):",
      "def list_types(self):",
      "if key.startswith('typedef '):",
      "def _load_backend_lib(backend, name, flags):",
      "def _make_ffi_library(ffi, libname, flags):",
      "def accessor_function(name):",
      "def accessor_variable(name):",
      "def addressof_var(name):",
      "def accessor_constant(name):",
      "def accessor_int_constant(name):",
      "def update_accessors():",
      "def accessor_enum(name, tp=tp, i=i):",
      "def make_accessor(name):",
      "def __getattr__(self, name):",
      "def __setattr__(self, name, value):",
      "def __dir__(self):",
      "def __addressof__(self, name):",
      "def __cffi_close__(self):",
      "def _builtin_function_type(func):"
    ],
    "description": ""
  },
  {
    "file": "api.py",
    "endpoints": [],
    "functions": [
      "def from_bytes(",
      "def from_fp(",
      "def from_path(",
      "def is_binary("
    ],
    "description": ""
  },
  {
    "file": "api.py",
    "endpoints": [],
    "functions": [
      "def request(method, url, **kwargs):",
      "def get(url, params=None, **kwargs):",
      "def options(url, **kwargs):",
      "def head(url, **kwargs):",
      "def post(url, data=None, json=None, **kwargs):",
      "def put(url, data=None, **kwargs):",
      "def patch(url, data=None, **kwargs):",
      "def delete(url, **kwargs):"
    ],
    "description": ""
  },
  {
    "file": "api.py",
    "endpoints": [],
    "functions": [
      "def __init__(  # noqa: PLR0913, PLR0917",
      "def _append_app_name_and_version(self, *base: str) -> str:",
      "def _optionally_create_directory(self, path: str) -> None:",
      "def _first_item_as_path_if_multipath(self, directory: str) -> Path:",
      "def user_data_dir(self) -> str:",
      "def site_data_dir(self) -> str:",
      "def user_config_dir(self) -> str:",
      "def site_config_dir(self) -> str:",
      "def user_cache_dir(self) -> str:",
      "def site_cache_dir(self) -> str:",
      "def user_state_dir(self) -> str:",
      "def user_log_dir(self) -> str:",
      "def user_documents_dir(self) -> str:",
      "def user_downloads_dir(self) -> str:",
      "def user_pictures_dir(self) -> str:",
      "def user_videos_dir(self) -> str:",
      "def user_music_dir(self) -> str:",
      "def user_desktop_dir(self) -> str:",
      "def user_runtime_dir(self) -> str:",
      "def site_runtime_dir(self) -> str:",
      "def user_data_path(self) -> Path:",
      "def site_data_path(self) -> Path:",
      "def user_config_path(self) -> Path:",
      "def site_config_path(self) -> Path:",
      "def user_cache_path(self) -> Path:",
      "def site_cache_path(self) -> Path:",
      "def user_state_path(self) -> Path:",
      "def user_log_path(self) -> Path:",
      "def user_documents_path(self) -> Path:",
      "def user_downloads_path(self) -> Path:",
      "def user_pictures_path(self) -> Path:",
      "def user_videos_path(self) -> Path:",
      "def user_music_path(self) -> Path:",
      "def user_desktop_path(self) -> Path:",
      "def user_runtime_path(self) -> Path:",
      "def site_runtime_path(self) -> Path:",
      "def iter_config_dirs(self) -> Iterator[str]:",
      "def iter_data_dirs(self) -> Iterator[str]:",
      "def iter_cache_dirs(self) -> Iterator[str]:",
      "def iter_runtime_dirs(self) -> Iterator[str]:",
      "def iter_config_paths(self) -> Iterator[Path]:",
      "def iter_data_paths(self) -> Iterator[Path]:",
      "def iter_cache_paths(self) -> Iterator[Path]:",
      "def iter_runtime_paths(self) -> Iterator[Path]:"
    ],
    "description": ""
  },
  {
    "file": "api.py",
    "endpoints": [],
    "functions": [
      "def request(method, url, **kwargs):",
      "def get(url, params=None, **kwargs):",
      "def options(url, **kwargs):",
      "def head(url, **kwargs):",
      "def post(url, data=None, json=None, **kwargs):",
      "def put(url, data=None, **kwargs):",
      "def patch(url, data=None, **kwargs):",
      "def delete(url, **kwargs):"
    ],
    "description": ""
  },
  {
    "file": "api.py",
    "endpoints": [],
    "functions": [
      "def get_objs_combined_axis(",
      "def _get_distinct_objs(objs: list[Index]) -> list[Index]:",
      "def _get_combined_index(",
      "def safe_sort_index(index: Index) -> Index:",
      "def union_indexes(indexes, sort: bool | None = True) -> Index:",
      "def _unique_indices(inds, dtype) -> Index:",
      "def conv(i):",
      "def _find_common_index_dtype(inds):",
      "def _sanitize_and_check(indexes):",
      "def all_indexes_same(indexes) -> bool:",
      "def default_index(n: int) -> RangeIndex:"
    ],
    "description": ""
  },
  {
    "file": "api.py",
    "endpoints": [],
    "functions": [
      "def make_block(",
      "def maybe_infer_ndim(values, placement: BlockPlacement, ndim: int | None) -> int:",
      "def __getattr__(name: str):"
    ],
    "description": ""
  }
]